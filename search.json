[{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://loelschlaeger.de/oeli/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://loelschlaeger.de/oeli/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lennart Oelschläger. Author, maintainer.","code":""},{"path":"http://loelschlaeger.de/oeli/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Oelschläger L (2025). oeli: Utilities Developing Data Science Software. R package version 0.7.5, https://github.com/loelschlaeger/oeli.","code":"@Manual{,   title = {oeli: Some Utilities for Developing Data Science Software},   author = {Lennart Oelschläger},   year = {2025},   note = {R package version 0.7.5},   url = {https://github.com/loelschlaeger/oeli}, }"},{"path":"http://loelschlaeger.de/oeli/index.html","id":"utilities-for-developing-r-code-","dir":"","previous_headings":"","what":"Utilities for Developing R Software","title":"Utilities for Developing R Software","text":"R package provides helper functions found useful developing R code - perhaps ! released package version can installed via: following shows demos. Click headings references available helpers category.","code":"install.packages(\"oeli\")"},{"path":"http://loelschlaeger.de/oeli/index.html","id":"distributions","dir":"","previous_headings":"","what":"Distributions","title":"Utilities for Developing R Software","text":"package density sampling functions distributions included base R, like Dirichlet: mixture Gaussian distributions:","code":"ddirichlet(x = c(0.2, 0.3, 0.5), concentration = 1:3) #> [1] 4.5 rdirichlet(concentration = 1:3) #> [1] 0.01795087 0.41315984 0.56888929 x <- c(0, 0) mean <- matrix(c(1, 1, -1, -1), ncol = 2) # means in columns Sigma <- matrix(c(diag(2), 0.1 * diag(2)), ncol = 2) # vectorized covariances in columns proportions <- c(0.7, 0.3) dmixnorm(x = x, mean = mean, Sigma = Sigma, proportions = proportions) #> [1] 0.04100656 pmixnorm(x = x, mean = mean, Sigma = Sigma, proportions = proportions) #> [1] 0.3171506 rmixnorm(n = 1000, mean = mean, Sigma = Sigma, proportions = proportions) |>   as.data.frame() |>    ggplot2::ggplot() + ggplot2::geom_point(ggplot2::aes(x = V1, y = V2))"},{"path":"http://loelschlaeger.de/oeli/index.html","id":"function-helpers","dir":"","previous_headings":"","what":"Function helpers","title":"Utilities for Developing R Software","text":"Retrieving default arguments function:","code":"f <- function(a, b = 1, c = \"\", ...) { } function_defaults(f) #> $b #> [1] 1 #>  #> $c #> [1] \"\""},{"path":"http://loelschlaeger.de/oeli/index.html","id":"indexing-helpers","dir":"","previous_headings":"","what":"Indexing helpers","title":"Utilities for Developing R Software","text":"Create possible permutations vector elements:","code":"permutations(LETTERS[1:3]) #> [[1]] #> [1] \"A\" \"B\" \"C\" #>  #> [[2]] #> [1] \"A\" \"C\" \"B\" #>  #> [[3]] #> [1] \"B\" \"A\" \"C\" #>  #> [[4]] #> [1] \"B\" \"C\" \"A\" #>  #> [[5]] #> [1] \"C\" \"A\" \"B\" #>  #> [[6]] #> [1] \"C\" \"B\" \"A\""},{"path":"http://loelschlaeger.de/oeli/index.html","id":"package-helpers","dir":"","previous_headings":"","what":"Package helpers","title":"Utilities for Developing R Software","text":"Quickly basic logo new package:  print matrix without filling entire console? data.frame?","code":"logo <- package_logo(\"my_package\", brackets = TRUE) print(logo) x <- matrix(rnorm(10000), ncol = 100, nrow = 100) print_matrix(x, rowdots = 4, coldots = 4, digits = 2, label = \"what a big matrix\") #> what a big matrix : 100 x 100 matrix of doubles  #>         [,1]  [,2] [,3] ... [,100] #> [1,]    -0.3 -0.74 -0.1 ...   1.01 #> [2,]    1.39 -2.06 1.29 ...   -0.5 #> [3,]   -0.45 -1.57 0.43 ...   1.61 #> ...      ...   ...  ... ...    ... #> [100,]  1.12  0.77 -1.6 ...  -0.08 x <- data.frame(x = rnorm(1000), y = LETTERS[1:10]) print_data.frame(x, rows = 7, digits = 0) #>      x  y #> 1     0 A #> 2     1 B #> 3     0 C #> 4    -1 D #> <993 rows hidden> #>           #> 998   0 H #> 999   0 I #> 1000  2 J"},{"path":"http://loelschlaeger.de/oeli/index.html","id":"simulation-helpers","dir":"","previous_headings":"","what":"Simulation helpers","title":"Utilities for Developing R Software","text":"Let’s simulate correlated regressor values different marginal distributions:","code":"labels <- c(\"P\", \"C\", \"N1\", \"N2\", \"U\") n <- 100 marginals <- list(   \"P\" = list(type = \"poisson\", lambda = 2),   \"C\" = list(type = \"categorical\", p = c(0.3, 0.2, 0.5)),   \"N1\" = list(type = \"normal\", mean = -1, sd = 2),   \"U\" = list(type = \"uniform\", min = -2, max = -1) ) correlation <- matrix(   c(1, -0.3, -0.1, 0, 0.5,     -0.3, 1, 0.3, -0.5, -0.7,     -0.1, 0.3, 1, -0.3, -0.3,     0, -0.5, -0.3, 1, 0.1,     0.5, -0.7, -0.3, 0.1, 1),   nrow = 5, ncol = 5 ) data <- correlated_regressors(   labels = labels, n = n, marginals = marginals, correlation = correlation ) head(data) #>   P C         N1         N2         U #> 1 0 3  2.9451097 -0.8638549 -1.921007 #> 2 2 1 -5.1350957  1.3390663 -1.133347 #> 3 3 1 -1.2722775 -0.1166058 -1.174671 #> 4 2 2 -1.5969501  0.3877268 -1.493931 #> 5 3 2 -0.3863015  0.5339768 -1.395497 #> 6 5 1 -3.6924075  0.9798459 -1.066466 cor(data) #>               P          C          N1           N2           U #> P   1.000000000 -0.2598683 -0.02141804 -0.008708831  0.44863283 #> C  -0.259868343  1.0000000  0.25880138 -0.523439321 -0.71222969 #> N1 -0.021418038  0.2588014  1.00000000 -0.300000000 -0.24632069 #> N2 -0.008708831 -0.5234393 -0.30000000  1.000000000  0.09679108 #> U   0.448632829 -0.7122297 -0.24632069  0.096791077  1.00000000"},{"path":"http://loelschlaeger.de/oeli/index.html","id":"transformation-helpers","dir":"","previous_headings":"","what":"Transformation helpers","title":"Utilities for Developing R Software","text":"group_data.frame() function groups given data.frame based values specified column:","code":"df <- data.frame(\"label\" = c(\"A\", \"B\"), \"number\" = 1:10) group_data.frame(df = df, by = \"label\") #> $A #>   label number #> 1     A      1 #> 3     A      3 #> 5     A      5 #> 7     A      7 #> 9     A      9 #>  #> $B #>    label number #> 2      B      2 #> 4      B      4 #> 6      B      6 #> 8      B      8 #> 10     B     10"},{"path":"http://loelschlaeger.de/oeli/index.html","id":"validation-helpers","dir":"","previous_headings":"","what":"Validation helpers","title":"Utilities for Developing R Software","text":"matrix proper transition probability matrix?","code":"matrix <- diag(4) matrix[1, 2] <- 1 check_transition_probability_matrix(matrix) #> [1] \"Must have row sums equal to 1\""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary R6 Object — Dictionary","title":"Dictionary R6 Object — Dictionary","text":"Provides simple key-value interface based R6.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Dictionary R6 Object — Dictionary","text":"keys [character()] Available keys. alias [list()] Available keys per alias value.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Dictionary R6 Object — Dictionary","text":"Dictionary$new() Dictionary$add() Dictionary$get() Dictionary$remove() Dictionary$print()","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Dictionary R6 Object — Dictionary","text":"Initializing new Dictionary object.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary R6 Object — Dictionary","text":"","code":"Dictionary$new(   key_name,   alias_name = NULL,   value_names = character(),   value_assert = alist(),   allow_overwrite = TRUE,   keys_reserved = character(),   alias_choices = NULL,   dictionary_name = NULL )"},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dictionary R6 Object — Dictionary","text":"key_name [character(1)] name key variable. alias_name [NULL | character(1)] Optionally name alias variable. value_names [character(0)] names values connected key. value_assert [alist(1)] element value_names, values_assert can identically named element form checkmate::assert*(...), ... can argument assertion function except x argument. allow_overwrite [logical(1)] Allow overwriting existing keys new values? Duplicate keys never allowed. keys_reserved [character()] Names must used keys. alias_choices [NULL character()] Optionally possible values alias. Can also NULL, alias values allowed. dictionary_name [NULL character()] Optionally name dictionary.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"Dictionary R6 Object — Dictionary","text":"Adding element dictionary.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary R6 Object — Dictionary","text":"","code":"Dictionary$add(...)"},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dictionary R6 Object — Dictionary","text":"... Values key variable key_name (must single character), alias variable alias_name (optionally, must character vector), variables specified value_names (, must comply value_assert checks).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Dictionary R6 Object — Dictionary","text":"Getting elements dictionary.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary R6 Object — Dictionary","text":"","code":"Dictionary$get(key, value = NULL)"},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dictionary R6 Object — Dictionary","text":"key [character(1)] value key variable key_name. Use $keys method available keys. value [NULL | character(1)] One elements value_names, selecting required value. Can also NULL (default) values connected key, returned list.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"method-remove-","dir":"Reference","previous_headings":"","what":"Method remove()","title":"Dictionary R6 Object — Dictionary","text":"Removing elements dictionary (associated alias, ).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary R6 Object — Dictionary","text":"","code":"Dictionary$remove(key)"},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dictionary R6 Object — Dictionary","text":"key [character(1)] value key variable key_name. Use $keys method available keys.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Dictionary R6 Object — Dictionary","text":"Printing details dictionary.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary R6 Object — Dictionary","text":"","code":"Dictionary$print()"},{"path":"http://loelschlaeger.de/oeli/reference/Dictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary R6 Object — Dictionary","text":"","code":"# Managing variable metadata for a dataset  meta_dict <- Dictionary$new(   key_name = \"var_name\",   alias_name = \"category\",   value_names = c(\"label\", \"type\"),   value_assert = alist(     label = checkmate::assert_string(),     type = checkmate::assert_choice(choices = c(\"numeric\", \"factor\", \"character\"))   ),   allow_overwrite = FALSE,   keys_reserved = c(\"id\"),   alias_choices = c(\"demographics\", \"outcome\", \"other\"),   dictionary_name = \"Variable Metadata\" )  # Add entries to the dictionary meta_dict$add(   var_name = \"age\",   label = \"Age of respondent\",   type = \"numeric\",   category = \"demographics\" )  meta_dict$add(   var_name = \"gender\",   label = \"Gender identity\",   type = \"factor\",   category = \"demographics\" )  meta_dict$add(   var_name = \"income\",   label = \"Annual income in USD\",   type = \"numeric\",   category = c(\"demographics\", \"outcome\") )  # Print dictionary meta_dict$print() #> <Dictionary> Variable Metadata  #> Keys:  #> - age #> - gender #> - income  # Retrieve full metadata for a variable meta_dict$get(\"income\") #> $label #> [1] \"Annual income in USD\" #>  #> $type #> [1] \"numeric\" #>   # Retrieve a specific piece of metadata meta_dict$get(\"income\", value = \"label\") #> [1] \"Annual income in USD\"  # Show variables by category meta_dict$alias #> $demographics #> [1] \"age\"    \"gender\" \"income\" #>  #> $outcome #> [1] \"income\" #>"},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulator R6 Object — Simulator","title":"Simulator R6 Object — Simulator","text":"Creates simulation setup, function f evaluated runs times, optionally combination input values. Provides convenience (see details): Simulation results can restored backup R session crashes. simulation runs can conducted initial simulation, failed simulation cases can re-run. Parallel computation progress updates supported.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"backup","dir":"Reference","previous_headings":"","what":"Backup","title":"Simulator R6 Object — Simulator","text":"Simulation results can saved disk, allowing restore results R session interrupted crashes simulation completes. enable backup, set backup = TRUE $go() method, create backup directory location specified path. restore, use Simulator$initialize(use_backup = path).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"more-runs-and-re-run","dir":"Reference","previous_headings":"","what":"More runs and re-run","title":"Simulator R6 Object — Simulator","text":"additional simulation runs needed, simply call $go() method . cases successfully completed previous runs attempted .","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"parallel-computation","dir":"Reference","previous_headings":"","what":"Parallel computation","title":"Simulator R6 Object — Simulator","text":"default, simulations run sequentially. since independent, can parallelized decrease computation time. enable parallel computation, use {future} framework. example, run advance computation 4 parallel R sessions.","code":"future::plan(future::multisession, workers = 4)"},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"progress-updates","dir":"Reference","previous_headings":"","what":"Progress updates","title":"Simulator R6 Object — Simulator","text":"Use {progressr} framework get progress updates. example, run following advance:","code":"progressr::handlers(global = TRUE) progressr::handlers(   progressr::handler_progress(format = \">> :percent, :eta to go :message\") )"},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Simulator R6 Object — Simulator","text":"results [tibble, read-] simulation results. cases [tibble, read-] simulation cases.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Simulator R6 Object — Simulator","text":"Simulator$new() Simulator$print() Simulator$define() Simulator$go()","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Simulator R6 Object — Simulator","text":"Initialize Simulator object, either new one backup.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulator R6 Object — Simulator","text":"","code":"Simulator$new(   use_backup = NULL,   verbose = getOption(\"verbose\", default = FALSE) )"},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulator R6 Object — Simulator","text":"use_backup [NULL | character(1)] Optionally path backup folder previously used $go(). verbose [logical(1)] Provide info? include progress updates. , see details.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Simulator R6 Object — Simulator","text":"Print method.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulator R6 Object — Simulator","text":"","code":"Simulator$print()"},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"method-define-","dir":"Reference","previous_headings":"","what":"Method define()","title":"Simulator R6 Object — Simulator","text":"Define function arguments new Simulator object.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulator R6 Object — Simulator","text":"","code":"Simulator$define(f, ...)"},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulator R6 Object — Simulator","text":"f [function] function evaluate. ... Arguments f. value must named argument f, list, element variant argument f.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"method-go-","dir":"Reference","previous_headings":"","what":"Method go()","title":"Simulator R6 Object — Simulator","text":"Run simulations.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulator R6 Object — Simulator","text":"","code":"Simulator$go(   runs = 0,   backup = FALSE,   path = paste0(\"backup_\", format(Sys.time(), \"%Y-%m-%d-%H-%M-%S\")) )"},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulator R6 Object — Simulator","text":"runs [integer(1)] number (additional) simulation runs. runs = 0, pending cases () solved. backup [logical(1)] Create backup path? path [character(1)] relevant, backup = TRUE. case, path new folder, yet exist allows reading writing.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Simulator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulator R6 Object — Simulator","text":"","code":"# 1. Initialize a new simulation setup: object <- Simulator$new(verbose = TRUE) #> Created <Simulator>, call `$define()` next.  # 2. Define function `f` and arguments (if any): f <- function(x, y = 1) {   Sys.sleep(runif(1)) # to see progress updates   x + y } x_args <- list(1, 2) object$define(f = f, x = x_args) #> Simulation details defined, call `$go()` next to run simulations. print(object) #> • Total cases: 0 #> → Pending cases: 0 #> ✔ Successful cases: 0 #> ✖ Failed cases: 0  # 3. Define 'future' and 'progress' (optional): if (FALSE) { # \\dontrun{ future::plan(future::sequential) progressr::handlers(global = TRUE)} # }  # 4. Evaluate `f` `runs` times at each parameter combination (backup is optional): path <- file.path(tempdir(), paste0(\"backup_\", format(Sys.time(), \"%Y-%m-%d-%H-%M-%S\"))) object$go(runs = 2, backup = TRUE, path = path) #> Saving backup to path /tmp/Rtmpx3Ye5o/backup_2025-08-10-14-05-43. #> Started simulation with 4 cases... #> Simulation complete, 0 cases failed.  # 5. Access the results: object$results #> # A tibble: 4 × 4 #>   .case .seconds        .input           .output   #>   <int> <drtn>          <list>           <list>    #> 1     1 0.18017912 secs <named list [1]> <dbl [1]> #> 2     2 0.73644209 secs <named list [1]> <dbl [1]> #> 3     3 0.01444554 secs <named list [1]> <dbl [1]> #> 4     4 0.02883840 secs <named list [1]> <dbl [1]>  # 6. Check if cases are pending or if an error occurred: object$cases #> # A tibble: 4 × 5 #>   .case .pending .error  .run x         #>   <int> <lgl>    <lgl>  <int> <list>    #> 1     1 FALSE    FALSE      1 <dbl [1]> #> 2     2 FALSE    FALSE      1 <dbl [1]> #> 3     3 FALSE    FALSE      2 <dbl [1]> #> 4     4 FALSE    FALSE      2 <dbl [1]>  # 7. Restore simulation results from backup: object_restored <- Simulator$new(use_backup = path) #> Loaded <Simulator> and 4 cases from backup. print(object_restored) #> • Total cases: 4 #> → Pending cases: 0 #> ✔ Successful cases: 4 #> ✖ Failed cases: 0 if (FALSE) all.equal(object, object_restored) # \\dontrun{}  # 8. Run more simulations and pending simulations (if any): object_restored$go(runs = 2) #> Started simulation with 4 cases... #> Simulation complete, 0 cases failed."},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":null,"dir":"Reference","previous_headings":"","what":"Storage R6 Object — Storage","title":"Storage R6 Object — Storage","text":"Provides simple indexing interface list elements based R6. Basically, allows store items list regain based identifiers defined user.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Storage R6 Object — Storage","text":"output depends method: $new() returns Storage object. $add(), $remove(), $print() invisibly return Storage object (allow method chaining) $get() returns requested element(s) $number() returns integer $indices() return integer vector","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"setting-identifiers","dir":"Reference","previous_headings":"","what":"Setting identifiers","title":"Storage R6 Object — Storage","text":"identifier character, typically binary property. Identifiers can negated placing exclamation mark (\"!\") front . Identifiers assigned elements previously need specified new elements; instead, default value can used. default value can defined either globally cases (via $missing_identifier field) separately specific case (via method argument).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"user-confirmation","dir":"Reference","previous_headings":"","what":"User confirmation","title":"Storage R6 Object — Storage","text":"desired, user can asked confirmation adding, extracting, removing elements using identifiers. behavior can set globally $confirm field customized separately specific case via method argument.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Storage R6 Object — Storage","text":"identifier [character()] identifiers used. confirm [logical(1)] default value confirmations. missing_identifier [logical(1)] default value specified identifiers. hide_warnings [logical(1)] Hide warnings (example unknown identifiers selected)?","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Storage R6 Object — Storage","text":"Storage$new() Storage$add() Storage$get() Storage$remove() Storage$number() Storage$indices() Storage$print()","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Storage R6 Object — Storage","text":"Initializing Storage object.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage R6 Object — Storage","text":"","code":"Storage$new()"},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"method-add-","dir":"Reference","previous_headings":"","what":"Method add()","title":"Storage R6 Object — Storage","text":"Adding element.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage R6 Object — Storage","text":"","code":"Storage$add(   x,   identifier,   confirm = interactive() & self$confirm,   missing_identifier = self$missing_identifier )"},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storage R6 Object — Storage","text":"x [] object saved. identifier [character()] Pne identifiers (identifier \"\" reserved select elements). confirm [logical(1)] Prompted confirmation? missing_identifier [logical(1) | NA] value specified identifiers.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Storage R6 Object — Storage","text":"Getting elements.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage R6 Object — Storage","text":"","code":"Storage$get(   identifier = character(),   ids = integer(),   logical = \"and\",   confirm = interactive() & self$confirm,   missing_identifier = self$missing_identifier,   id_names = FALSE )"},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storage R6 Object — Storage","text":"identifier [character()] Pne identifiers (identifier \"\" reserved select elements). ids [integer()] One ids. logical [character(1)] case multiple identifiers selected, combined? Options : \"\" (default): identifiers combined logical (identifiers must TRUE) \"\": identifiers combined logical (least one identifier must TRUE) confirm [logical(1)] Prompted confirmation? missing_identifier [logical(1) | NA] value specified identifiers. id_names [logical(1)] Name elements according ids?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"method-remove-","dir":"Reference","previous_headings":"","what":"Method remove()","title":"Storage R6 Object — Storage","text":"removing elements","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage R6 Object — Storage","text":"","code":"Storage$remove(   identifier = character(),   ids = integer(),   logical = \"and\",   confirm = interactive() & self$confirm,   missing_identifier = self$missing_identifier,   shift_ids = TRUE )"},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storage R6 Object — Storage","text":"identifier [character()] Pne identifiers (identifier \"\" reserved select elements). ids [integer()] One ids. logical [character(1)] case multiple identifiers selected, combined? Options : \"\" (default): identifiers combined logical (identifiers must TRUE) \"\": identifiers combined logical (least one identifier must TRUE) confirm [logical(1)] Prompted confirmation? missing_identifier [logical(1) | NA] value specified identifiers. shift_ids [logical(1)] Shift ids -elements removed?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"method-number-","dir":"Reference","previous_headings":"","what":"Method number()","title":"Storage R6 Object — Storage","text":"Computing number identified elements.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage R6 Object — Storage","text":"","code":"Storage$number(   identifier = \"all\",   missing_identifier = self$missing_identifier,   logical = \"and\",   confirm = FALSE )"},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storage R6 Object — Storage","text":"identifier [character()] Pne identifiers (identifier \"\" reserved select elements). missing_identifier [logical(1) | NA] value specified identifiers. logical [character(1)] case multiple identifiers selected, combined? Options : \"\" (default): identifiers combined logical (identifiers must TRUE) \"\": identifiers combined logical (least one identifier must TRUE) confirm [logical(1)] Prompted confirmation?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"method-indices-","dir":"Reference","previous_headings":"","what":"Method indices()","title":"Storage R6 Object — Storage","text":"Returning indices based defined identifiers.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage R6 Object — Storage","text":"","code":"Storage$indices(   identifier = \"all\",   logical = \"and\",   confirm = interactive() & self$confirm )"},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storage R6 Object — Storage","text":"identifier [character()] Pne identifiers (identifier \"\" reserved select elements). logical [character(1)] case multiple identifiers selected, combined? Options : \"\" (default): identifiers combined logical (identifiers must TRUE) \"\": identifiers combined logical (least one identifier must TRUE) confirm [logical(1)] Prompted confirmation?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Storage R6 Object — Storage","text":"Printing details saved elements.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Storage R6 Object — Storage","text":"","code":"Storage$print(...)"},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Storage R6 Object — Storage","text":"... Currently used.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/Storage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Storage R6 Object — Storage","text":"","code":"### 1. Create a `Storage` object: my_storage <- Storage$new()  # 2. Add elements along with identifiers: my_storage$   add(42, c(\"number\", \"rational\"))$   add(pi, c(\"number\", \"!rational\"))$   add(\"fear of black cats\", c(\"text\", \"!rational\"))$   add(\"wearing a seat belt\", c(\"text\", \"rational\"))$   add(mean, \"function\")  # 3. What elements are stored? print(my_storage) #> number of elements: 5  #> identifiers used: number rational text function   # 4. Extract elements based on identifiers: my_storage$get(\"rational\") #> [[1]] #> [1] 42 #>  #> [[2]] #> [1] \"wearing a seat belt\" #>  my_storage$get(\"!rational\") #> [[1]] #> [1] 3.141593 #>  #> [[2]] #> [1] \"fear of black cats\" #>  my_storage$get(c(\"text\", \"!rational\")) #> [[1]] #> [1] \"fear of black cats\" #>  my_storage$get(\"all\") # get all elements #> [[1]] #> [1] 42 #>  #> [[2]] #> [1] 3.141593 #>  #> [[3]] #> [1] \"fear of black cats\" #>  #> [[4]] #> [1] \"wearing a seat belt\" #>  #> [[5]] #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x55633db4b9b8> #> <environment: namespace:base> #>  my_storage$get(c(\"text\", \"!text\")) #> list() my_storage$get(c(\"text\", \"!text\"), logical = \"or\") #> [[1]] #> [1] 42 #>  #> [[2]] #> [1] 3.141593 #>  #> [[3]] #> [1] \"fear of black cats\" #>  #> [[4]] #> [1] \"wearing a seat belt\" #>  #> [[5]] #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x55633db4b9b8> #> <environment: namespace:base> #>   # 5. Extract elements based on ids: my_storage$get(ids = 4:5) #> [[1]] #> [1] \"wearing a seat belt\" #>  #> [[2]] #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x55633db4b9b8> #> <environment: namespace:base> #>  my_storage$get(ids = 4:5, id_names = TRUE) # add the ids as names #> $`4` #> [1] \"wearing a seat belt\" #>  #> $`5` #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x55633db4b9b8> #> <environment: namespace:base> #>"},{"path":"http://loelschlaeger.de/oeli/reference/check_correlation_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check correlation matrix — check_correlation_matrix","title":"Check correlation matrix — check_correlation_matrix","text":"functions check whether input fulfills properties correlation matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_correlation_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check correlation matrix — check_correlation_matrix","text":"","code":"check_correlation_matrix(x, dim = NULL, tolerance = sqrt(.Machine$double.eps))  assert_correlation_matrix(   x,   dim = NULL,   tolerance = sqrt(.Machine$double.eps),   .var.name = checkmate::vname(x),   add = NULL )  test_correlation_matrix(x, dim = NULL, tolerance = sqrt(.Machine$double.eps))"},{"path":"http://loelschlaeger.de/oeli/reference/check_correlation_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check correlation matrix — check_correlation_matrix","text":"x [] Object check. dim [integer(1)] matrix dimension. tolerance [numeric(1)] non-negative tolerance value. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_correlation_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check correlation matrix — check_correlation_matrix","text":"documented check_matrix.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/check_correlation_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check correlation matrix — check_correlation_matrix","text":"","code":"M <- matrix(c(1,  0.9,  0.9, 0.9,  1,  -0.9, 0.9,  -0.9,  1), nrow = 3) check_correlation_matrix(M) #> [1] \"Must have positive eigenvalues only\" test_correlation_matrix(M) #> [1] FALSE if (FALSE) { # \\dontrun{ assert_correlation_matrix(M) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/check_covariance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check covariance matrix — check_covariance_matrix","title":"Check covariance matrix — check_covariance_matrix","text":"functions check whether input fulfills properties covariance matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_covariance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check covariance matrix — check_covariance_matrix","text":"","code":"check_covariance_matrix(x, dim = NULL, tolerance = sqrt(.Machine$double.eps))  assert_covariance_matrix(   x,   dim = NULL,   tolerance = sqrt(.Machine$double.eps),   .var.name = checkmate::vname(x),   add = NULL )  test_covariance_matrix(x, dim = NULL, tolerance = sqrt(.Machine$double.eps))"},{"path":"http://loelschlaeger.de/oeli/reference/check_covariance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check covariance matrix — check_covariance_matrix","text":"x [] Object check. dim [integer(1)] matrix dimension. tolerance [numeric(1)] non-negative tolerance value. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_covariance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check covariance matrix — check_covariance_matrix","text":"documented check_matrix.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/check_covariance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check covariance matrix — check_covariance_matrix","text":"","code":"M <- matrix(c(1, 2, 3, 2, 1, 2, 3, 2, 1), nrow = 3) check_covariance_matrix(M) #> [1] \"Must have positive eigenvalues only\" test_covariance_matrix(M) #> [1] FALSE if (FALSE) { # \\dontrun{ assert_covariance_matrix(M) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/check_list_of_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check list of lists — check_list_of_lists","title":"Check list of lists — check_list_of_lists","text":"functions check whether input list contains list elements.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_list_of_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check list of lists — check_list_of_lists","text":"","code":"check_list_of_lists(x, len = NULL)  assert_list_of_lists(   x,   len = NULL,   .var.name = checkmate::vname(x),   add = NULL )  test_list_of_lists(x, len = NULL)"},{"path":"http://loelschlaeger.de/oeli/reference/check_list_of_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check list of lists — check_list_of_lists","text":"x [] Object check. len [integer(1)] Exact expected length x. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_list_of_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check list of lists — check_list_of_lists","text":"documented check_list.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/check_list_of_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check list of lists — check_list_of_lists","text":"","code":"L <- list(list(1), list(2), 3) check_list_of_lists(L) #> [1] \"Check for element 3 failed: Must be of type 'list', not 'double'\" test_list_of_lists(L) #> [1] FALSE if (FALSE) { # \\dontrun{ assert_list_of_lists(L) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/check_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check missing formal argument — check_missing","title":"Check missing formal argument — check_missing","text":"functions check whether value specified argument function.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check missing formal argument — check_missing","text":"","code":"check_missing(x)  assert_missing(x)  test_missing(x)"},{"path":"http://loelschlaeger.de/oeli/reference/check_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check missing formal argument — check_missing","text":"x [] formal argument.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check missing formal argument — check_missing","text":"Depending function prefix: check successful, assert_missing() returns x invisibly, whereas check_missing() test_missing() return TRUE. check successful, assert_missing() throws error message, test_missing() returns FALSE, check_missing() returns string error message.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/check_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check missing formal argument — check_missing","text":"","code":"f <- function(x) {   check_missing(x) } f() #> [1] \"Argument needs a value\"  g <- function(x) {   test_missing(x) } g() #> [1] FALSE  h <- function(x) {   assert_missing(x) } if (FALSE) { # \\dontrun{ h() } # }"},{"path":"http://loelschlaeger.de/oeli/reference/check_numeric_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check numeric vector — check_numeric_vector","title":"Check numeric vector — check_numeric_vector","text":"functions check whether input numeric vector.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_numeric_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check numeric vector — check_numeric_vector","text":"","code":"check_numeric_vector(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )  assert_numeric_vector(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE,   .var.name = checkmate::vname(x),   add = NULL )  test_numeric_vector(   x,   lower = -Inf,   upper = Inf,   finite = FALSE,   any.missing = TRUE,   all.missing = TRUE,   len = NULL,   min.len = NULL,   max.len = NULL,   unique = FALSE,   sorted = FALSE,   names = NULL,   typed.missing = FALSE,   null.ok = FALSE )"},{"path":"http://loelschlaeger.de/oeli/reference/check_numeric_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check numeric vector — check_numeric_vector","text":"x [] Object check. lower [numeric(1)] Lower value elements x must greater equal . upper [numeric(1)] Upper value elements x must lower equal . finite [logical(1)] Check finite values? Default FALSE. .missing [logical(1)] vectors missing values allowed? Default TRUE. .missing [logical(1)] vectors non-missing values allowed? Default TRUE. Note empty vectors non-missing values. len [integer(1)] Exact expected length x. min.len [integer(1)] Minimal length x. max.len [integer(1)] Maximal length x. unique [logical(1)] Must values unique? Default FALSE. sorted [logical(1)] Elements must sorted ascending order. Missing values ignored. names [character(1)] Check names. See checkNamed possible values. Default “” performs check . Note can use checkSubset check specific set names. typed.missing [logical(1)] set FALSE (default), types missing values (NA, NA_integer_, NA_real_, NA_character_ NA_character_) well empty vectors allowed type-checking atomic input. Set TRUE enable strict type checking. null.ok [logical(1)] set TRUE, x may also NULL. case type check x performed, additional checks disabled. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_numeric_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check numeric vector — check_numeric_vector","text":"documented check_numeric.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/check_numeric_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check numeric vector — check_numeric_vector","text":"","code":"x <- c(1, 2, \"3\") check_numeric_vector(x) #> [1] \"Must be of type 'numeric', not 'character'\" test_numeric_vector(x) #> [1] FALSE if (FALSE) { # \\dontrun{ assert_numeric_vector(x) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/check_probability_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Check probability vector — check_probability_vector","title":"Check probability vector — check_probability_vector","text":"functions check whether input fulfills properties probability matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_probability_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check probability vector — check_probability_vector","text":"","code":"check_probability_vector(x, len = NULL, tolerance = sqrt(.Machine$double.eps))  assert_probability_vector(   x,   len = NULL,   tolerance = sqrt(.Machine$double.eps),   .var.name = checkmate::vname(x),   add = NULL )  test_probability_vector(x, len = NULL, tolerance = sqrt(.Machine$double.eps))"},{"path":"http://loelschlaeger.de/oeli/reference/check_probability_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check probability vector — check_probability_vector","text":"x [] Object check. len [integer(1)] Exact expected length x. tolerance [numeric(1)] non-negative tolerance value. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_probability_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check probability vector — check_probability_vector","text":"documented check_numeric.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/check_probability_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check probability vector — check_probability_vector","text":"","code":"p <- c(0.2, 0.3, 0.6) check_probability_vector(p) #> [1] \"Must add up to 1\" test_probability_vector(p) #> [1] FALSE if (FALSE) { # \\dontrun{ assert_probability_vector(p) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/check_transition_probability_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check transition probability matrix — check_transition_probability_matrix","title":"Check transition probability matrix — check_transition_probability_matrix","text":"functions check whether input transition probability matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_transition_probability_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check transition probability matrix — check_transition_probability_matrix","text":"","code":"check_transition_probability_matrix(   x,   dim = NULL,   tolerance = sqrt(.Machine$double.eps) )  assert_transition_probability_matrix(   x,   dim = NULL,   tolerance = sqrt(.Machine$double.eps),   .var.name = checkmate::vname(x),   add = NULL )  test_transition_probability_matrix(   x,   dim = NULL,   tolerance = sqrt(.Machine$double.eps) )"},{"path":"http://loelschlaeger.de/oeli/reference/check_transition_probability_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check transition probability matrix — check_transition_probability_matrix","text":"x [] Object check. dim [integer(1)] matrix dimension. tolerance [numeric(1)] non-negative tolerance value. .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname. add [AssertCollection] Collection store assertion messages. See AssertCollection.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/check_transition_probability_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check transition probability matrix — check_transition_probability_matrix","text":"documented check_matrix.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/check_transition_probability_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check transition probability matrix — check_transition_probability_matrix","text":"","code":"T <- matrix(c(0.8,  0.2,  0.1, 0.1,  0.7,  0.4, 0.1,  0.1,  0.6), nrow = 3) check_transition_probability_matrix(T) #> [1] \"Must have row sums equal to 1\" test_transition_probability_matrix(T) #> [1] FALSE if (FALSE) { # \\dontrun{ assert_transition_probability_matrix(T) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/chunk_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a vector into chunks — chunk_vector","title":"Split a vector into chunks — chunk_vector","text":"function either splits vector n chunks equal size (type = 1), splits vector chunks size n (type = 2).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/chunk_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a vector into chunks — chunk_vector","text":"","code":"chunk_vector(x, n, type = 1, strict = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/chunk_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a vector into chunks — chunk_vector","text":"x [atomic()`] vector elements. n [integer(1)] number smaller equal length(x). type [1 | 2] Either 1 (default) split x n chunks equal size, 2 split x chunks size n. strict [logical(1)] Set TRUE fail length(x) multiple n, FALSE (default), else.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/chunk_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a vector into chunks — chunk_vector","text":"list.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/chunk_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a vector into chunks — chunk_vector","text":"","code":"x <- 1:12 chunk_vector(x, n = 3, type = 1) #> $`1` #> [1] 1 2 3 4 #>  #> $`2` #> [1] 5 6 7 8 #>  #> $`3` #> [1]  9 10 11 12 #>  chunk_vector(x, n = 3, type = 2) #> $`1` #> [1] 1 2 3 #>  #> $`2` #> [1] 4 5 6 #>  #> $`3` #> [1] 7 8 9 #>  #> $`4` #> [1] 10 11 12 #>  try(chunk_vector(x, n = 5, strict = TRUE)) #> Error : Input `n` is bad: Not a multiple of 'length(x)'"},{"path":"http://loelschlaeger.de/oeli/reference/correlated_regressors.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate correlated regressor values — correlated_regressors","title":"Simulate correlated regressor values — correlated_regressors","text":"function simulates regressor values various marginal distributions custom correlations.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/correlated_regressors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate correlated regressor values — correlated_regressors","text":"","code":"correlated_regressors(   labels,   n = 100,   marginals = list(),   correlation = diag(length(labels)),   verbose = FALSE )"},{"path":"http://loelschlaeger.de/oeli/reference/correlated_regressors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate correlated regressor values — correlated_regressors","text":"labels [character()] Unique labels regressors. n [integer(1)] number values per regressor. marginals [list()] Optionally marginal distributions regressors. specified, standard normal marginal distributions used. list entry must named according regressor label, following distributions currently supported: discrete distributions Poisson: list(type = \"poisson\", lambda = ...) categorical: list(type = \"categorical\", p = c(...)) continuous distributions normal: list(type = \"normal\", mean = ..., sd = ...) uniform: list(type = \"uniform\", min = ..., max = ...) correlation [matrix()] correlation matrix dimension length(labels), (p, q)-th entry defines correlation regressor labels[p] labels[q]. verbose [logical(1)] Print information simulated regressors?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/correlated_regressors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate correlated regressor values — correlated_regressors","text":"data.frame n rows length(labels) columns.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/correlated_regressors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate correlated regressor values — correlated_regressors","text":"function heavily depends {SimMultiCorrData} package.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/correlated_regressors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate correlated regressor values — correlated_regressors","text":"","code":"labels <- c(\"P\", \"C\", \"N1\", \"N2\", \"U\") n <- 100 marginals <- list(   \"P\" = list(type = \"poisson\", lambda = 2),   \"C\" = list(type = \"categorical\", p = c(0.3, 0.2, 0.5)),   \"N1\" = list(type = \"normal\", mean = -1, sd = 2),   \"U\" = list(type = \"uniform\", min = -2, max = -1) ) correlation <- matrix(   c(1, -0.3, -0.1, 0, 0.5,     -0.3, 1, 0.3, -0.5, -0.7,     -0.1, 0.3, 1, -0.3, -0.3,     0, -0.5, -0.3, 1, 0.1,     0.5, -0.7, -0.3, 0.1, 1),   nrow = 5, ncol = 5 ) data <- correlated_regressors(   labels = labels, n = n, marginals = marginals, correlation = correlation ) head(data) #>   P C        N1         N2         U #> 1 4 2 -1.918715  0.9094678 -1.585205 #> 2 0 3  1.588737  1.2866084 -1.974714 #> 3 2 1 -3.202249  0.9647485 -1.293196 #> 4 1 1 -1.950808  0.3974310 -1.163453 #> 5 3 1 -4.619708  1.7331128 -1.294075 #> 6 1 3  1.290957 -0.3793118 -1.837241"},{"path":"http://loelschlaeger.de/oeli/reference/cov_to_chol.html","id":null,"dir":"Reference","previous_headings":"","what":"Cholesky root of covariance matrix — cov_to_chol","title":"Cholesky root of covariance matrix — cov_to_chol","text":"functions compute Cholesky root elements covariance matrix , conversely, build covariance matrix Cholesky root elements.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/cov_to_chol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cholesky root of covariance matrix — cov_to_chol","text":"","code":"cov_to_chol(cov, unique = TRUE)  chol_to_cov(chol)  unique_chol(chol)"},{"path":"http://loelschlaeger.de/oeli/reference/cov_to_chol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cholesky root of covariance matrix — cov_to_chol","text":"cov [matrix()] covariance matrix. can also zero matrix, case Cholesky root defined zero matrix. unique [logical(1)] Ensure Cholesky decomposition unique restricting diagonal elements positive? chol [numeric()] Cholesky root elements.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/cov_to_chol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cholesky root of covariance matrix — cov_to_chol","text":"cov_to_chol numeric vector Cholesky root elements. chol_to_cov covariance matrix.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/cov_to_chol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cholesky root of covariance matrix — cov_to_chol","text":"","code":"cov <- sample_covariance_matrix(4) chol <- cov_to_chol(cov) all.equal(cov, chol_to_cov(chol)) #> [1] TRUE"},{"path":"http://loelschlaeger.de/oeli/reference/ddirichlet.html","id":null,"dir":"Reference","previous_headings":"","what":"Dirichlet distribution — ddirichlet_cpp","title":"Dirichlet distribution — ddirichlet_cpp","text":"function ddirichlet() computes density Dirichlet distribution. function rdirichlet() samples Dirichlet distribution. functions suffix _cpp perform input checks, hence faster.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/ddirichlet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dirichlet distribution — ddirichlet_cpp","text":"","code":"ddirichlet_cpp(x, concentration, log = FALSE)  rdirichlet_cpp(concentration)  ddirichlet(x, concentration, log = FALSE)  rdirichlet(n = 1, concentration)"},{"path":"http://loelschlaeger.de/oeli/reference/ddirichlet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dirichlet distribution — ddirichlet_cpp","text":"x [numeric()] probability vector. concentration [numeric()] concentration vector length x. log [logical(1)] Return logarithm density value? n [integer(1)] number samples.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/ddirichlet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dirichlet distribution — ddirichlet_cpp","text":"ddirichlet(): density value. rdirichlet(): n = 1 vector length p, else matrix dimension n times p samples rows.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/ddirichlet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dirichlet distribution — ddirichlet_cpp","text":"","code":"x <- c(0.5, 0.3, 0.2) concentration <- 1:3  # compute density ddirichlet(x = x, concentration = concentration) #> [1] 0.72 ddirichlet(x = x, concentration = concentration, log = TRUE) #> [1] -0.3285041  # sample rdirichlet(concentration = 1:3) #> [1] 0.01633353 0.51470909 0.46895737 rdirichlet(n = 4, concentration = 1:2) #>           [,1]      [,2] #> [1,] 0.5282588 0.4717412 #> [2,] 0.3135231 0.6864769 #> [3,] 0.4286776 0.5713224 #> [4,] 0.4865854 0.5134146"},{"path":"http://loelschlaeger.de/oeli/reference/delete_columns_data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Deleting data.frame columns — delete_columns_data.frame","title":"Deleting data.frame columns — delete_columns_data.frame","text":"function deletes columns data.frame name.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/delete_columns_data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deleting data.frame columns — delete_columns_data.frame","text":"","code":"delete_columns_data.frame(df, column_names)"},{"path":"http://loelschlaeger.de/oeli/reference/delete_columns_data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deleting data.frame columns — delete_columns_data.frame","text":"df [data.frame] data.frame. column_names [character()] name(s) column(s) df delete.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/delete_columns_data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deleting data.frame columns — delete_columns_data.frame","text":"input df without columns defined column_names.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/delete_columns_data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deleting data.frame columns — delete_columns_data.frame","text":"","code":"df <- data.frame(\"label\" = c(\"A\", \"B\"), \"number\" = 1:10) delete_columns_data.frame(df = df, column_names = \"label\") #>    number #> 1       1 #> 2       2 #> 3       3 #> 4       4 #> 5       5 #> 6       6 #> 7       7 #> 8       8 #> 9       9 #> 10     10 delete_columns_data.frame(df = df, column_names = \"number\") #>    label #> 1      A #> 2      B #> 3      A #> 4      B #> 5      A #> 6      B #> 7      A #> 8      B #> 9      A #> 10     B delete_columns_data.frame(df = df, column_names = c(\"label\", \"number\")) #> data frame with 0 columns and 10 rows"},{"path":"http://loelschlaeger.de/oeli/reference/diff_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Difference and un-difference covariance matrix — diff_cov","title":"Difference and un-difference covariance matrix — diff_cov","text":"functions difference un-difference random vectors covariance matrices.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/diff_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Difference and un-difference covariance matrix — diff_cov","text":"","code":"diff_cov(cov, ref = 1)  undiff_cov(cov_diff, ref = 1)  delta(ref = 1, dim)  M(ranking = seq_len(dim), dim)"},{"path":"http://loelschlaeger.de/oeli/reference/diff_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Difference and un-difference covariance matrix — diff_cov","text":"cov, cov_diff [matrix()] (differenced) covariance matrix dimension dim (dim - 1, respectively). ref [integer(1)] reference row 1 dim differencing maps cov cov_diff, see details. dim [integer(1)] matrix dimension. ranking [integer()] integers 1 dim arbitrary order.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/diff_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Difference and un-difference covariance matrix — diff_cov","text":"(differenced un-differenced) covariance matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/diff_cov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Difference and un-difference covariance matrix — diff_cov","text":"Assume \\(x \\sim N(0, \\Sigma)\\) multivariate normally distributed random vector dimension \\(n\\). may want consider differenced vector $$\\tilde x = (x_1 - x_k, x_2 - x_k, \\dots, x_n - x_k)',$$ excluding \\(k\\)th element (hence, \\(\\tilde x\\) dimension \\((n - 1) \\times 1\\)). Formally, \\(\\tilde x = \\Delta_k x\\), \\(\\Delta_k\\) difference operator depends reference row \\(k\\). precise, \\(\\Delta_k\\) identity matrix dimension \\(n\\) without row \\(k\\) \\(-1\\)s column \\(k\\). difference operator \\(\\Delta_k\\) can computed via delta(ref = k, dim = n). , \\(\\tilde x \\sim N(0, \\tilde \\Sigma)\\), $$\\tilde{\\Sigma} = \\Delta_k \\Sigma \\Delta_k'$$ differenced covariance matrix respect row \\(k = 1,\\dots,n\\). differenced covariance matrix \\(\\tilde \\Sigma\\) can computed via diff_delta(Sigma, ref = k). Since \\(\\Delta_k\\) non-bijective mapping, \\(\\Sigma\\) uniquely restored \\(\\tilde \\Sigma\\). However, possible compute non-unique solution \\(\\Sigma_0\\), \\(\\Delta_k \\Sigma_0 \\Delta_k = \\tilde \\Sigma\\). non-unique solution, add column row zeros column row number \\(k\\) \\(\\tilde{\\Sigma}\\), respectively. \"un-differenced\" covariance matrix \\(\\Sigma_0\\) can computed via undiff_delta(Sigma_diff, ref = k). alternative \\(\\Delta_k\\), function M() returns matrix taking differences resulting vector negative.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/diff_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Difference and un-difference covariance matrix — diff_cov","text":"","code":"n <- 4 Sigma <- sample_covariance_matrix(dim = n) k <- 2 x <- c(1, 3, 2, 4)  # build difference operator delta_k <- delta(ref = k, dim = n)  # difference vector delta_k %*% x #>      [,1] #> [1,]   -2 #> [2,]   -1 #> [3,]    1  # difference Sigma (Sigma_diff <- diff_cov(Sigma, ref = k)) #>           [,1]      [,2]      [,3] #> [1,] 0.4166869 0.2931553 0.3792757 #> [2,] 0.2931553 1.1295830 0.9869624 #> [3,] 0.3792757 0.9869624 1.4388613  # un-difference Sigma (Sigma_0 <- undiff_cov(Sigma_diff, ref = k)) #>           [,1] [,2]      [,3]      [,4] #> [1,] 0.4166869    0 0.2931553 0.3792757 #> [2,] 0.0000000    0 0.0000000 0.0000000 #> [3,] 0.2931553    0 1.1295830 0.9869624 #> [4,] 0.3792757    0 0.9869624 1.4388613  # difference again Sigma_diff_2 <- diff_cov(Sigma_0, ref = k) all.equal(Sigma_diff, Sigma_diff_2) #> [1] TRUE  # difference such that the resulting vector is negative M(ranking = order(x, decreasing = TRUE), dim = n) %*% x #>      [,1] #> [1,]   -1 #> [2,]   -1 #> [3,]   -1"},{"path":"http://loelschlaeger.de/oeli/reference/dmixnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixture of normal distributions — dmixnorm_cpp","title":"Mixture of normal distributions — dmixnorm_cpp","text":"function dmixnorm() computes density mixture multivariate normal distribution. function pmixnorm() computes cumulative distribution function mixture multivariate normal distribution. function rmixnorm() samples mixture multivariate normal distribution. functions suffix _cpp perform input checks, hence faster. univariate normal mixture available special case p = 1.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dmixnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixture of normal distributions — dmixnorm_cpp","text":"","code":"dmixnorm_cpp(x, mean, Sigma, proportions)  pmixnorm_cpp(x, mean, Sigma, proportions, abseps = 0.001)  rmixnorm_cpp(mean, Sigma, proportions)  dmixnorm(x, mean, Sigma, proportions)  pmixnorm(x, mean, Sigma, proportions, abseps = 0.001)  rmixnorm(n = 1, mean, Sigma, proportions)"},{"path":"http://loelschlaeger.de/oeli/reference/dmixnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixture of normal distributions — dmixnorm_cpp","text":"x [numeric(p)] quantile vector length p, p dimension. mean [matrix(nrow = p, ncol = c)] mean vectors component columns. Sigma [matrix(nrow = p^2, ncol = c)] vectorized covariance matrices component columns. proportions [numeric(c)] non-negative mixing proportions components. proportions sum unity, rescaled . abseps [numeric(1)] absolute error tolerance. n [integer(1)] number requested samples.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dmixnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixture of normal distributions — dmixnorm_cpp","text":"dmixnorm(): density value. pmixnorm(): value distribution function. rmixnorm(): n = 1 vector length p (note column vector rmixnorm_cpp()), else matrix dimension n times p samples rows.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dmixnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mixture of normal distributions — dmixnorm_cpp","text":"pmixnorm() based mvtnorm::pmvnorm randomized Quasi-Monte-Carlo procedure Genz Bretz. argument abseps controls accuracy Gaussian integral approximation.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/dmixnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixture of normal distributions — dmixnorm_cpp","text":"","code":"x <- c(0, 0) mean <- matrix(c(-1, -1, 0, 0), ncol = 2) Sigma <- matrix(c(diag(2), diag(2)), ncol = 2) proportions <- c(0.7, 0.3)  # compute density dmixnorm(x = x, mean = mean, Sigma = Sigma, proportions = proportions) #> [1] 0.08873136  # compute CDF pmixnorm(x = x, mean = mean, Sigma = Sigma, proportions = proportions) #> [1] 0.5705027  # sample rmixnorm(n = 3, mean = mean, Sigma = Sigma, proportions = proportions) #>            [,1]       [,2] #> [1,] -0.8200754 -0.1215489 #> [2,] -2.9877176  1.0323998 #> [3,] -0.1631780 -0.6575572"},{"path":"http://loelschlaeger.de/oeli/reference/dmvnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate normal distribution — dmvnorm_cpp","title":"Multivariate normal distribution — dmvnorm_cpp","text":"function dmvnorm() computes density multivariate normal distribution. function pmvnorm() computes cumulative distribution function multivariate normal distribution. function rmvnorm() samples multivariate normal distribution. functions suffix _cpp perform input checks, hence faster. univariate normal distribution available special case p = 1.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dmvnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate normal distribution — dmvnorm_cpp","text":"","code":"dmvnorm_cpp(x, mean, Sigma, log = FALSE)  pmvnorm_cpp(x, mean, Sigma, abseps = 0.001)  rmvnorm_cpp(mean, Sigma, log = FALSE)  dmvnorm(x, mean, Sigma, log = FALSE)  pmvnorm(x, mean, Sigma, abseps = 0.001)  rmvnorm(n = 1, mean, Sigma, log = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/dmvnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate normal distribution — dmvnorm_cpp","text":"x [numeric()] quantile vector length p. mean [numeric()] mean vector length p. functions without suffix _cpp, can also length 1 convenience, rep(mean, p) considered. Sigma [matrix()] covariance matrix dimension p. rmvnorm(), arbitrary dimensions (.e., full rows corresponding columns) Sigma can 0. functions without suffix _cpp p = 1, can also single numeric convenience. Note Sigma case variance, different format stats::dnorm() stats::rnorm, require standard deviation. log [logical(1)] Consider log-normal distribution? abseps [numeric(1)] absolute error tolerance. n [integer(1)] number requested samples.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dmvnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate normal distribution — dmvnorm_cpp","text":"dmvnorm(): density value. pmvnorm(): value distribution function. rmvnorm(): n = 1 vector length p (note column vector rmvnorm_cpp()), else matrix dimension n times p samples rows.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dmvnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate normal distribution — dmvnorm_cpp","text":"pmvnorm() just calls mvtnorm::pmvnorm randomized Quasi-Monte-Carlo procedure Genz Bretz. argument abseps controls accuracy Gaussian integral approximation.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/dmvnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate normal distribution — dmvnorm_cpp","text":"","code":"x <- c(0, 0) mean <- c(0, 0) Sigma <- diag(2)  # compute density dmvnorm(x = x, mean = mean, Sigma = Sigma) #> [1] 0.1591549 dmvnorm(x = x, mean = mean, Sigma = Sigma, log = TRUE) #> [1] -1.837877  # compute CDF pmvnorm(x = x, mean = mean, Sigma = Sigma) #> [1] 0.25  # sample rmvnorm(n = 3, mean = mean, Sigma = Sigma) #>             [,1]       [,2] #> [1,] -0.09914213  0.6812084 #> [2,] -0.07430854  0.8999236 #> [3,] -0.65964480 -0.9445316 rmvnorm(mean = mean, Sigma = Sigma, log = TRUE) #> [1] 0.1440321 0.4731730"},{"path":"http://loelschlaeger.de/oeli/reference/do.call_timed.html","id":null,"dir":"Reference","previous_headings":"","what":"Measure computation time — do.call_timed","title":"Measure computation time — do.call_timed","text":"function measures computation time call.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/do.call_timed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Measure computation time — do.call_timed","text":"","code":"do.call_timed(what, args, units = \"secs\")"},{"path":"http://loelschlaeger.de/oeli/reference/do.call_timed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Measure computation time — do.call_timed","text":", args Passed .call. units Passed difftime.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/do.call_timed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Measure computation time — do.call_timed","text":"list two elements \"result\" (results .call call) \"time\" (computation time).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/do.call_timed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Measure computation time — do.call_timed","text":"function wrapper .call.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/do.call_timed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Measure computation time — do.call_timed","text":"","code":"if (FALSE) { # \\dontrun{ what <- function(s) {   Sys.sleep(s)   return(s) } args <- list(s = 1) do.call_timed(what = what, args = args) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/dtnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncated normal distribution — dtnorm_cpp","title":"Truncated normal distribution — dtnorm_cpp","text":"function dtnorm() computes density truncated normal distribution. function rtnorm() samples truncated normal distribution. function dttnorm() rttnorm() compute density sample two-sided truncated normal distribution, respectively. functions suffix _cpp perform input checks, hence faster.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dtnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncated normal distribution — dtnorm_cpp","text":"","code":"dtnorm_cpp(x, mean, sd, point, above, log = FALSE)  dttnorm_cpp(x, mean, sd, lower, upper, log = FALSE)  rtnorm_cpp(mean, sd, point, above, log = FALSE)  rttnorm_cpp(mean, sd, lower, upper, log = FALSE)  dtnorm(x, mean, sd, point, above, log = FALSE)  dttnorm(x, mean, sd, lower, upper, log = FALSE)  rtnorm(mean, sd, point, above, log = FALSE)  rttnorm(mean, sd, lower, upper, log = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/dtnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncated normal distribution — dtnorm_cpp","text":"x [numeric(1)] quantile. mean [numeric(1)] mean. sd [numeric(1)] non-negative standard deviation. point, lower, upper [numeric(1)] truncation point. [logical(1)] Truncate ? Else, . log [logical(1)] Return logarithm density value?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dtnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncated normal distribution — dtnorm_cpp","text":"dtnorm() dttnorm(): density value. rtnorm() rttnorm(): random draw","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/dtnorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncated normal distribution — dtnorm_cpp","text":"","code":"x <- c(0, 0) mean <- c(0, 0) Sigma <- diag(2)  # compute density dmvnorm(x = x, mean = mean, Sigma = Sigma) #> [1] 0.1591549 dmvnorm(x = x, mean = mean, Sigma = Sigma, log = TRUE) #> [1] -1.837877  # sample rmvnorm(n = 3, mean = mean, Sigma = Sigma) #>            [,1]        [,2] #> [1,] -1.2028392 -0.41305200 #> [2,] -0.2556056 -0.99661509 #> [3,]  0.5290891  0.02572599 rmvnorm(mean = mean, Sigma = Sigma, log = TRUE) #> [1] 0.1721355 1.0836358"},{"path":"http://loelschlaeger.de/oeli/reference/dwishart.html","id":null,"dir":"Reference","previous_headings":"","what":"Wishart distribution — dwishart_cpp","title":"Wishart distribution — dwishart_cpp","text":"function dwishart() computes density Wishart distribution. function rwishart() samples Wishart distribution. functions suffix _cpp perform input checks, hence faster.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dwishart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wishart distribution — dwishart_cpp","text":"","code":"dwishart_cpp(x, df, scale, log = FALSE, inv = FALSE)  rwishart_cpp(df, scale, inv = FALSE)  dwishart(x, df, scale, log = FALSE, inv = FALSE)  rwishart(df, scale, inv = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/dwishart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wishart distribution — dwishart_cpp","text":"x [matrix()] covariance matrix dimension p. df [integer()] degrees freedom greater equal p. scale [matrix()] scale covariance matrix dimension p. log [logical(1)] Return logarithm density value? inv [logical(1)] Use inverse Wishart distribution?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/dwishart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wishart distribution — dwishart_cpp","text":"dwishart(): density value. rwishart(): matrix, random draw.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/dwishart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wishart distribution — dwishart_cpp","text":"","code":"x <- diag(2) df <- 6 scale <- matrix(c(1, -0.3, -0.3, 0.8), ncol = 2)  # compute density dwishart(x = x, df = df, scale = scale) #> [1] 0.002607893 dwishart(x = x, df = df, scale = scale, log = TRUE) #> [1] -5.949213 dwishart(x = x, df = df, scale = scale, inv = TRUE) #> [1] 0.0004824907  # sample rwishart(df = df, scale = scale) #>            [,1]       [,2] #> [1,]  4.2342718 -0.0589546 #> [2,] -0.0589546  1.3524160 rwishart(df = df, scale = scale, inv = TRUE) #>            [,1]       [,2] #> [1,]  0.2437757 -0.1430196 #> [2,] -0.1430196  0.2256511  # expectation of Wishart is df * scale n <- 100 replicate(n, rwishart(df = df, scale = scale), simplify = FALSE) |>   Reduce(f = \"+\") / n #>           [,1]      [,2] #> [1,]  5.558206 -1.552689 #> [2,] -1.552689  4.803429 df * scale #>      [,1] [,2] #> [1,]  6.0 -1.8 #> [2,] -1.8  4.8  # expectation of inverse Wishart is scale / (df - p - 1) n <- 100 replicate(n, rwishart(df = df, scale = scale, TRUE), simplify = FALSE) |>   Reduce(f = \"+\") / n #>             [,1]        [,2] #> [1,]  0.38708182 -0.09145206 #> [2,] -0.09145206  0.25241685 scale / (df - 2 - 1) #>            [,1]       [,2] #> [1,]  0.3333333 -0.1000000 #> [2,] -0.1000000  0.2666667"},{"path":"http://loelschlaeger.de/oeli/reference/equidistant_vectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate equidistant vectors in Euclidean space — equidistant_vectors","title":"Generate equidistant vectors in Euclidean space — equidistant_vectors","text":"function constructs coordinates vertices regular simplex \\(\\mathbb{R}^{\\code{dim}}\\) returns first n , scaled pairwise Euclidean distance two vertices equals dist, centered centroid center.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/equidistant_vectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate equidistant vectors in Euclidean space — equidistant_vectors","text":"","code":"equidistant_vectors(dim, n = dim + 1, dist = 1, center = rep(0, dim))"},{"path":"http://loelschlaeger.de/oeli/reference/equidistant_vectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate equidistant vectors in Euclidean space — equidistant_vectors","text":"dim [integer(1)] dimension. n [integer(1)] number vertices return. larger dim + 1. dist [numeric(1)] Desired pairwise Euclidean distance two vertices. center [numeric(dim)] Desired center.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/equidistant_vectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate equidistant vectors in Euclidean space — equidistant_vectors","text":"matrix, column vertex simplex.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/equidistant_vectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate equidistant vectors in Euclidean space — equidistant_vectors","text":"","code":"dim <- n <- 3 (dist <- runif(1)) #> [1] 0.8884956 (center <- rnorm(dim)) #> [1] -1.6545922 -1.5794826  0.7969991 (V <- equidistant_vectors(dim = dim, n = n, dist = dist, center = center)) #>            [,1]       [,2]      [,3] #> [1,] -1.1709565 -1.8964101 -1.896410 #> [2,] -1.6649781 -1.1520049 -1.921465 #> [3,]  0.6489165  0.6489165  1.093164 rowMeans(V) #> [1] -1.6545922 -1.5794826  0.7969991 dist(t(V)) #>           1         2 #> 2 0.8884956           #> 3 0.8884956 0.8884956"},{"path":"http://loelschlaeger.de/oeli/reference/find_namespace_calls.html","id":null,"dir":"Reference","previous_headings":"","what":"Namespace calls — find_namespace_calls","title":"Namespace calls — find_namespace_calls","text":"function searches namespace calls .R files, .e., code lines format <package name>::<function name>.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/find_namespace_calls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Namespace calls — find_namespace_calls","text":"","code":"find_namespace_calls(path = \"R\", triple_colon = FALSE, as_list = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/find_namespace_calls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Namespace calls — find_namespace_calls","text":"path [character(1)] path name folder. .R files folder sub-directories searched. triple_colon [logical(1)] Also search :::? as_list [logical(1)] Simplify output list unique function names per package?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/find_namespace_calls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Namespace calls — find_namespace_calls","text":"data.frame. as_list = TRUE, list.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/find_namespace_calls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Namespace calls — find_namespace_calls","text":"","code":"if (FALSE) { # \\dontrun{ find_namespace_calls() find_namespace_calls(as_list = TRUE) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/function_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get function arguments — function_arguments","title":"Get function arguments — function_arguments","text":"function returns names function arguments.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/function_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get function arguments — function_arguments","text":"","code":"function_arguments(f, with_default = TRUE, with_ellipsis = TRUE)"},{"path":"http://loelschlaeger.de/oeli/reference/function_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get function arguments — function_arguments","text":"f [function] function. with_default [logical(1)] Include function arguments default values? with_ellipsis [logical(1)] Include \"...\" argument present?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/function_arguments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get function arguments — function_arguments","text":"character vector.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/function_arguments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get function arguments — function_arguments","text":"","code":"f <- function(a, b = 1, c = \"\", ...) { } function_arguments(f) #> [1] \"a\"   \"b\"   \"c\"   \"...\" function_arguments(f, with_default = FALSE) #> [1] \"a\"   \"...\" function_arguments(f, with_ellipsis = FALSE) #> [1] \"a\" \"b\" \"c\""},{"path":"http://loelschlaeger.de/oeli/reference/function_body.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract function body — function_body","title":"Extract function body — function_body","text":"function extracts body function single character.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/function_body.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract function body — function_body","text":"","code":"function_body(fun, braces = FALSE, nchar = getOption(\"width\") - 4)"},{"path":"http://loelschlaeger.de/oeli/reference/function_body.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract function body — function_body","text":"fun [function] function. braces [logical(1)] Remove \"{\" \"}\" start end ()? nchar [integer(1)] maximum number characters abbreviation, least 3.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/function_body.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract function body — function_body","text":"character, body f.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/function_body.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract function body — function_body","text":"","code":"fun <- mean.default function_body(fun) #> [1] \"if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) { warning(\\\"argume...\" function_body(fun, braces = TRUE) #> [1] \"{ if (!is.numeric(x) && !is.complex(x) && !is.logical(x)) { warning(\\\"argu...\" function_body(fun, nchar = 30) #> [1] \"if (!is.numeric(x) && !is.c...\""},{"path":"http://loelschlaeger.de/oeli/reference/function_defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Get default function arguments — function_defaults","title":"Get default function arguments — function_defaults","text":"function returns default function arguments ().","code":""},{"path":"http://loelschlaeger.de/oeli/reference/function_defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get default function arguments — function_defaults","text":"","code":"function_defaults(f, exclude = NULL)"},{"path":"http://loelschlaeger.de/oeli/reference/function_defaults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get default function arguments — function_defaults","text":"f [function] function. exclude [NULL | character()] Argument names exclude. Can NULL (default) exclude argument names.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/function_defaults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get default function arguments — function_defaults","text":"named list.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/function_defaults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get default function arguments — function_defaults","text":"","code":"f <- function(a, b = 1, c = \"\", ...) { } function_defaults(f) #> $b #> [1] 1 #>  #> $c #> [1] \"\" #>  function_defaults(f, exclude = \"b\") #> $c #> [1] \"\" #>"},{"path":"http://loelschlaeger.de/oeli/reference/gaussian_tv.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian total variation — gaussian_tv","title":"Gaussian total variation — gaussian_tv","text":"Computes total variation (TV) two multivariate Gaussian distributions \\(f_1,f_2\\): $$\\mathrm{TV}(f_1, f_2) = \\tfrac{1}{2} \\int_{\\mathbb{R}^p} \\lvert f_1(x) - f_2(x) \\rvert \\, dx.$$ value ranges 0 (identical distributions) 1 (overlap).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/gaussian_tv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian total variation — gaussian_tv","text":"","code":"gaussian_tv(   mean1,   mean2,   Sigma1,   Sigma2,   method = c(\"auto\", \"mc\", \"cubature\"),   n = 10000,   tol_equal = 1e-06,   eps = 1e-06 )"},{"path":"http://loelschlaeger.de/oeli/reference/gaussian_tv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian total variation — gaussian_tv","text":"mean1, mean2 [numeric(p)] mean vectors. Sigma1, Sigma2 [matrix(nrow = p, ncol = p)] covariance matrices. method [character(1)] Computation method. One : \"auto\": use closed-form formula covariances equal, otherwise use \"cubature\" \\(p \\le 2\\) \"mc\" higher dimensions. \"mc\": estimate via Monte Carlo importance sampling mixture \\(0.5 (f_1 + f_2)\\). \"cubature\": compute overlap via adaptive cubature integration bounding box, convert TV. Exact slow \\(p \\ge 2\\). n [integer(1)] Number Monte Carlo samples draw. tol_equal [numeric(1)] Numerical tolerance used decide whether Sigma1 Sigma2 considered equal (enabling closed-form formula \"auto\" mode). eps [numeric(1)] used method = \"cubature\". Specifies total probability mass allowed lie outside integration hyper-rectangle across dimensions. determines numerical integration bounds: function chooses limits probability point either Gaussian falling outside box eps. bound split evenly across dimensions via union bound, per-dimension tail probability approximately eps / p. Smaller values produce wider bounds (slower accurate integration), larger values yield narrower bounds (faster potentially less accurate).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/gaussian_tv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian total variation — gaussian_tv","text":"total variation [0, 1].","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/gaussian_tv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian total variation — gaussian_tv","text":"","code":"### univariate case mean1 <- 0 mean2 <- 1 Sigma1 <- Sigma2 <- matrix(1) gaussian_tv(mean1, mean2, Sigma1, Sigma2) #> [1] 0.3829249  ### bivariate case mean1 <- c(0, 0) mean2 <- c(1, 1) Sigma1 <- matrix(c(1, 0.2, 0.2, 1), ncol = 2) Sigma2 <- matrix(c(1.5, -0.3, -0.3, 1), ncol = 2) gaussian_tv(mean1, mean2, Sigma1, Sigma2, method = \"mc\", n = 1e3) #> [1] 0.5352511 #> attr(,\"se\") #> [1] 0.008996084"},{"path":"http://loelschlaeger.de/oeli/reference/group_data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouping of a data.frame — group_data.frame","title":"Grouping of a data.frame — group_data.frame","text":"function groups data.frame according values one column.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/group_data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouping of a data.frame — group_data.frame","text":"","code":"group_data.frame(df, by, keep_by = TRUE)"},{"path":"http://loelschlaeger.de/oeli/reference/group_data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouping of a data.frame — group_data.frame","text":"df [data.frame] data.frame. [character(1)] name column df group . keep_by [logical(1)] Keep grouping column ?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/group_data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grouping of a data.frame — group_data.frame","text":"list data.frames, subsets df.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/group_data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouping of a data.frame — group_data.frame","text":"","code":"df <- data.frame(\"label\" = c(\"A\", \"B\"), \"number\" = 1:10) group_data.frame(df = df, by = \"label\") #> $A #>   label number #> 1     A      1 #> 3     A      3 #> 5     A      5 #> 7     A      7 #> 9     A      9 #>  #> $B #>    label number #> 2      B      2 #> 4      B      4 #> 6      B      6 #> 8      B      8 #> 10     B     10 #>  group_data.frame(df = df, by = \"label\", keep_by = FALSE) #> $A #>   number #> 1      1 #> 3      3 #> 5      5 #> 7      7 #> 9      9 #>  #> $B #>    number #> 2       2 #> 4       4 #> 6       6 #> 8       8 #> 10     10 #>"},{"path":"http://loelschlaeger.de/oeli/reference/identical_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if two objects have identical structure — identical_structure","title":"Check if two objects have identical structure — identical_structure","text":"function determines whether two objects structure, includes mode, class dimension include concrete values attributes.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/identical_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if two objects have identical structure — identical_structure","text":"","code":"identical_structure(x, y)"},{"path":"http://loelschlaeger.de/oeli/reference/identical_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if two objects have identical structure — identical_structure","text":"x, y [] Two objects.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/identical_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if two objects have identical structure — identical_structure","text":"Either TRUE x y structure, FALSE, else.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/identical_structure.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Check if two objects have identical structure — identical_structure","text":"Inspired https://stackoverflow.com//45548885/15157768.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/identical_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if two objects have identical structure — identical_structure","text":"","code":"identical_structure(integer(1), 1L) #> [1] TRUE identical_structure(diag(2), matrix(rnorm(4), 2, 2)) #> [1] TRUE identical_structure(diag(2), data.frame(diag(2))) #> [1] FALSE"},{"path":"http://loelschlaeger.de/oeli/reference/input_check_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized response to input check — input_check_response","title":"Standardized response to input check — input_check_response","text":"function provides standardized response input checks, ensuring consistency.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/input_check_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized response to input check — input_check_response","text":"","code":"input_check_response(   check,   var_name = NULL,   error = TRUE,   prefix = \"Input {.var {var_name}} is bad:\" )"},{"path":"http://loelschlaeger.de/oeli/reference/input_check_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized response to input check — input_check_response","text":"check [TRUE | character(1) | list()] Matches return value check* functions {checkmate} package, .e., either TRUE check successful, character (error message) else. Can also list multiple values alternative criteria, least one must TRUE successful check. var_name [NULL | character(1)] Optionally specifies name input checked. name used default value prefix argument. error [logical(1)] check TRUE (element check TRUE, check list), throw error? prefix [character(1)] prefix thrown error message, relevant error TRUE.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/input_check_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized response to input check — input_check_response","text":"TRUE check TRUE (element check TRUE, check list) . Else, depending error: error TRUE, throws error. error FALSE, returns FALSE.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/input_check_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized response to input check — input_check_response","text":"","code":"x <- \"1\" y <- 1  ### check is successful input_check_response(   check = checkmate::check_character(x),   var_name = \"x\",   error = TRUE ) #> [1] TRUE  ### alternative checks input_check_response(   check = list(     checkmate::check_character(x),     checkmate::check_character(y)   ),   var_name = \"x\",   error = TRUE ) #> [1] TRUE  ### standardized check response if (FALSE) { # \\dontrun{ input_check_response(   check = checkmate::check_character(y),   var_name = \"y\",   error = TRUE )  input_check_response(   check = list(     checkmate::check_flag(x),     checkmate::check_character(y)   ),   var_name = \"y\",   error = TRUE ) } # }"},{"path":"http://loelschlaeger.de/oeli/reference/insert_matrix_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert column in matrix — insert_matrix_column","title":"Insert column in matrix — insert_matrix_column","text":"function inserts column matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/insert_matrix_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert column in matrix — insert_matrix_column","text":"","code":"insert_matrix_column(A, x, p)"},{"path":"http://loelschlaeger.de/oeli/reference/insert_matrix_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert column in matrix — insert_matrix_column","text":"[matrix()] matrix. x [atomic()] column added, length nrow(). Can also single value. p [integer())] position(s) add column, one : p = 0 appends column left p = ncol() appends column right p = n inserts column n-th (n + 1)-th column .","code":""},{"path":"http://loelschlaeger.de/oeli/reference/insert_matrix_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert column in matrix — insert_matrix_column","text":"matrix.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/insert_matrix_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert column in matrix — insert_matrix_column","text":"","code":"A <- diag(3) x <- 1:3 insert_matrix_column(A, x, 0) #>      [,1] [,2] [,3] [,4] #> [1,]    1    1    0    0 #> [2,]    2    0    1    0 #> [3,]    3    0    0    1 insert_matrix_column(A, x, 1) #>      [,1] [,2] [,3] [,4] #> [1,]    1    1    0    0 #> [2,]    0    2    1    0 #> [3,]    0    3    0    1 insert_matrix_column(A, x, 2) #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    1    0 #> [2,]    0    1    2    0 #> [3,]    0    0    3    1 insert_matrix_column(A, x, 3) #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    1 #> [2,]    0    1    0    2 #> [3,]    0    0    1    3  ### also single value x <- 2 insert_matrix_column(A, x, 0) #>      [,1] [,2] [,3] [,4] #> [1,]    2    1    0    0 #> [2,]    2    0    1    0 #> [3,]    2    0    0    1  ### also multiple positions insert_matrix_column(A, x, 0:3) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    2    1    2    0    2    0    2 #> [2,]    2    0    2    1    2    0    2 #> [3,]    2    0    2    0    2    1    2  ### also trivial case insert_matrix_column(matrix(nrow = 0, ncol = 0), integer(), integer()) #> <0 x 0 matrix>"},{"path":"http://loelschlaeger.de/oeli/reference/insert_vector_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert entry in vector — insert_vector_entry","title":"Insert entry in vector — insert_vector_entry","text":"function inserts value vector.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/insert_vector_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert entry in vector — insert_vector_entry","text":"","code":"insert_vector_entry(v, x, p)"},{"path":"http://loelschlaeger.de/oeli/reference/insert_vector_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert entry in vector — insert_vector_entry","text":"v [atomic()] vector. x [atomic(1)] entry added. p [integer())] position(s) add value, one : p = 0 appends value left p = length(v) appends value right p = n inserts value n-th (n + 1)-th entry v.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/insert_vector_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert entry in vector — insert_vector_entry","text":"vector.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/insert_vector_entry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert entry in vector — insert_vector_entry","text":"","code":"v <- 1:3 x <- 0 insert_vector_entry(v, x, 0) #> [1] 0 1 2 3 insert_vector_entry(v, x, 1) #> [1] 1 0 2 3 insert_vector_entry(v, x, 2) #> [1] 1 2 0 3 insert_vector_entry(v, x, 3) #> [1] 1 2 3 0  ### also multiple positions insert_vector_entry(v, x, 0:3) #> [1] 0 1 0 2 0 3 0  ### also trivial case insert_vector_entry(integer(), integer(), integer()) #> integer(0)"},{"path":"http://loelschlaeger.de/oeli/reference/map_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Map indices — map_indices","title":"Map indices — map_indices","text":"function maps indices input vector corresponding sequences grouped indices. element input specifies group mapped sequence, determined grouping size n.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/map_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map indices — map_indices","text":"","code":"map_indices(indices, n)"},{"path":"http://loelschlaeger.de/oeli/reference/map_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map indices — map_indices","text":"indices [integer()] index vector, element specifies group mapped sequence. n [integer] size group consecutive indices.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/map_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map indices — map_indices","text":"integer vector, containing mapped indices according specified group size.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/map_indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map indices — map_indices","text":"function useful working indices arranged fixed-size groups, group can referenced single index. example, indices structured chunks 3, calling function n = 3 map corresponding groups 3 consecutive indices given input indices, see examples.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/map_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map indices — map_indices","text":"","code":"# Example: Map indices based on groups of 3 map_indices(c(1, 3, 5), 3) #> [1]  1  2  3  7  8  9 13 14 15"},{"path":"http://loelschlaeger.de/oeli/reference/match_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Argument matching — match_arg","title":"Argument matching — match_arg","text":"function matches function arguments modified version match.arg.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/match_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Argument matching — match_arg","text":"","code":"match_arg(arg, choices, several.ok = FALSE, none.ok = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/match_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Argument matching — match_arg","text":"arg [character()] function argument. choices [character()] Allowed values arg. several.ok [logical(1)] arg allowed one element? none.ok [logical(1)] arg allowed zero elements?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/match_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Argument matching — match_arg","text":"un-abbreviated version exact unique partial match one. Otherwise, error signaled several.ok FALSE none.ok FALSE. several.ok TRUE (least) one element arg match, un-abbreviated versions matches returned. none.ok TRUE arg zero elements, character(0) returned.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/match_numerics.html","id":null,"dir":"Reference","previous_headings":"","what":"Best-possible match of two numeric vectors — match_numerics","title":"Best-possible match of two numeric vectors — match_numerics","text":"function matches indices two numeric vectors good possible (means smallest possible sum deviations).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/match_numerics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Best-possible match of two numeric vectors — match_numerics","text":"","code":"match_numerics(x, y)"},{"path":"http://loelschlaeger.de/oeli/reference/match_numerics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Best-possible match of two numeric vectors — match_numerics","text":"x, y [numeric()] Two vectors length.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/match_numerics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Best-possible match of two numeric vectors — match_numerics","text":"integer vector length length(x) positions y x.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/match_numerics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Best-possible match of two numeric vectors — match_numerics","text":"","code":"x <- c(-1, 0, 1) y <- c(0.1, 1.5, -1.2) match_numerics(x, y) #> [1] 2 3 1"},{"path":"http://loelschlaeger.de/oeli/reference/matrix_diagonal_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get indices of matrix diagonal — matrix_diagonal_indices","title":"Get indices of matrix diagonal — matrix_diagonal_indices","text":"function returns indices diagonal elements quadratic matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/matrix_diagonal_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get indices of matrix diagonal — matrix_diagonal_indices","text":"","code":"matrix_diagonal_indices(n, triangular = NULL)"},{"path":"http://loelschlaeger.de/oeli/reference/matrix_diagonal_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get indices of matrix diagonal — matrix_diagonal_indices","text":"n [integer(1)] matrix dimension. triangular [NULL character(1)] NULL (default), elements matrix considered. \"lower\" (\"upper\"), lower- (upper-) triangular matrix considered.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/matrix_diagonal_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get indices of matrix diagonal — matrix_diagonal_indices","text":"integer vector.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/matrix_diagonal_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get indices of matrix diagonal — matrix_diagonal_indices","text":"","code":"# indices of diagonal elements n <- 3 matrix(1:n^2, n, n) #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9 matrix_diagonal_indices(n) #> [1] 1 5 9  # indices of diagonal elements of lower-triangular matrix L <- matrix(0, n, n) L[lower.tri(L, diag=TRUE)] <- 1:((n * (n + 1)) / 2) L #>      [,1] [,2] [,3] #> [1,]    1    0    0 #> [2,]    2    4    0 #> [3,]    3    5    6 matrix_diagonal_indices(n, triangular = \"lower\") #> [1] 1 4 6  # indices of diagonal elements of upper-triangular matrix U <- matrix(0, n, n) U[upper.tri(U, diag=TRUE)] <- 1:((n * (n + 1)) / 2) U #>      [,1] [,2] [,3] #> [1,]    1    2    4 #> [2,]    0    3    5 #> [3,]    0    0    6 matrix_diagonal_indices(n, triangular = \"upper\") #> [1] 1 3 6"},{"path":"http://loelschlaeger.de/oeli/reference/matrix_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get matrix indices — matrix_indices","title":"Get matrix indices — matrix_indices","text":"function returns matrix indices character.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/matrix_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get matrix indices — matrix_indices","text":"","code":"matrix_indices(x, prefix = \"\", exclude_diagonal = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/matrix_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get matrix indices — matrix_indices","text":"x [matrix] matrix. prefix [character(1)] prefix indices. exclude_diagonal [logical(1)] Exclude indices row equals column?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/matrix_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get matrix indices — matrix_indices","text":"character vector.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/matrix_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get matrix indices — matrix_indices","text":"","code":"M <- diag(3) matrix_indices(M) #> [1] \"11\" \"21\" \"31\" \"12\" \"22\" \"32\" \"13\" \"23\" \"33\" matrix_indices(M, \"M_\") #> [1] \"M_11\" \"M_21\" \"M_31\" \"M_12\" \"M_22\" \"M_32\" \"M_13\" \"M_23\" \"M_33\" matrix_indices(M, \"M_\", TRUE) #> [1] \"M_21\" \"M_31\" \"M_12\" \"M_32\" \"M_13\" \"M_23\""},{"path":"http://loelschlaeger.de/oeli/reference/merge_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge named lists — merge_lists","title":"Merge named lists — merge_lists","text":"function merges lists based element names. Elements included final output list, former list contributed element name.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/merge_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge named lists — merge_lists","text":"","code":"merge_lists(...)"},{"path":"http://loelschlaeger.de/oeli/reference/merge_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge named lists — merge_lists","text":"... One named list(s).","code":""},{"path":"http://loelschlaeger.de/oeli/reference/merge_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge named lists — merge_lists","text":"list.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/merge_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge named lists — merge_lists","text":"","code":"merge_lists(list(\"a\" = 1, \"b\" = 2), list(\"b\" = 3, \"c\" = 4, \"d\" = NULL)) #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 4 #>  #> $d #> NULL #>"},{"path":"http://loelschlaeger.de/oeli/reference/occurrence_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide information about occurrences — occurrence_info","title":"Provide information about occurrences — occurrence_info","text":"function provides verbose information absolute relative element occurrences data.frame columns.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/occurrence_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide information about occurrences — occurrence_info","text":"","code":"occurrence_info(x, relative = FALSE, named = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/occurrence_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide information about occurrences — occurrence_info","text":"x [data.frame] object check occurrences. relative [logical(1) ] number rows columns printed, greater equal 2. named [logical(1) ] Prepend column names x (NA)?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/occurrence_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide information about occurrences — occurrence_info","text":"character().","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/occurrence_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide information about occurrences — occurrence_info","text":"","code":"occurrence_info(datasets::warpbreaks, relative = FALSE, named = TRUE) #> [1] \"breaks: 4x 21, 4x 26, 4x 29, 3x 15, 3x 18, 3x 28, 2x 16, 2x 17, 2x 19, 2x 20, 2x 24, 2x 30, 2x 36, 2x 39, 1x 10, 1x 12, 1x 13, 1x 14, 1x 25, 1x 27, 1x 31, 1x 35, 1x 41, 1x 42, 1x 43, 1x 44, 1x 51, 1x 52, 1x 54, 1x 67, 1x 70\" #> [2] \"wool: 27x A, 27x B\"                                                                                                                                                                                                              #> [3] \"tension: 18x L, 18x M, 18x H\""},{"path":"http://loelschlaeger.de/oeli/reference/oeli-package.html","id":null,"dir":"Reference","previous_headings":"","what":"oeli: Some Utilities for Developing Data Science Software — oeli-package","title":"oeli: Some Utilities for Developing Data Science Software — oeli-package","text":"collection general-purpose helper functions (maybe others) find useful developing data science software. Includes tools simulation, data transformation, input validation, .","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/oeli-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"oeli: Some Utilities for Developing Data Science Software — oeli-package","text":"Maintainer: Lennart Oelschläger oelschlaeger.lennart@gmail.com","code":""},{"path":"http://loelschlaeger.de/oeli/reference/package_logo.html","id":null,"dir":"Reference","previous_headings":"","what":"Creating a basic logo for an R package — package_logo","title":"Creating a basic logo for an R package — package_logo","text":"function creates basic R package logo. logo white background package name (without curly brackets) center. font size package name scaled fits inside logo. Type ?oeli see example.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/package_logo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creating a basic logo for an R package — package_logo","text":"","code":"package_logo(   package_name,   brackets = FALSE,   background = ggplot2::ggplot() + ggplot2::theme_void(),   s_x = 1,   s_y = 1,   s_width = 1,   s_height = 1,   white_around_sticker = FALSE )"},{"path":"http://loelschlaeger.de/oeli/reference/package_logo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creating a basic logo for an R package — package_logo","text":"package_name [character(1)] package name. brackets [logical(1)] Curly brackets around package name? background ggplot object, background sticker. s_x, s_y, s_width, s_height, white_around_sticker Passed sticker.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/package_logo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creating a basic logo for an R package — package_logo","text":"ggplot object.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/package_logo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Creating a basic logo for an R package — package_logo","text":"function builds upon sticker. Use use_logo set logo package.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/package_logo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creating a basic logo for an R package — package_logo","text":"","code":"print(package_logo(\"my_package\", brackets = TRUE))"},{"path":"http://loelschlaeger.de/oeli/reference/permutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Build permutations — permutations","title":"Build permutations — permutations","text":"function creates permutations given vector.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/permutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build permutations — permutations","text":"","code":"permutations(x)"},{"path":"http://loelschlaeger.de/oeli/reference/permutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build permutations — permutations","text":"x [atomic()] vector.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/permutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build permutations — permutations","text":"list permutations x.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/permutations.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Build permutations — permutations","text":"Modified version https://stackoverflow.com//20199902/15157768.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/permutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build permutations — permutations","text":"","code":"permutations(1:3) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 1 3 2 #>  #> [[3]] #> [1] 2 1 3 #>  #> [[4]] #> [1] 2 3 1 #>  #> [[5]] #> [1] 3 1 2 #>  #> [[6]] #> [1] 3 2 1 #>  permutations(LETTERS[1:3]) #> [[1]] #> [1] \"A\" \"B\" \"C\" #>  #> [[2]] #> [1] \"A\" \"C\" \"B\" #>  #> [[3]] #> [1] \"B\" \"A\" \"C\" #>  #> [[4]] #> [1] \"B\" \"C\" \"A\" #>  #> [[5]] #> [1] \"C\" \"A\" \"B\" #>  #> [[6]] #> [1] \"C\" \"B\" \"A\" #>"},{"path":"http://loelschlaeger.de/oeli/reference/print_data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Print (abbreviated) data.frame — print_data.frame","title":"Print (abbreviated) data.frame — print_data.frame","text":"function prints (possibly abbreviated) data.frame.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/print_data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print (abbreviated) data.frame — print_data.frame","text":"","code":"print_data.frame(   x,   rows = NULL,   cols = NULL,   digits = NULL,   row.names = TRUE,   col.names = TRUE )"},{"path":"http://loelschlaeger.de/oeli/reference/print_data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print (abbreviated) data.frame — print_data.frame","text":"x [data.frame] data.frame. rows, cols [integer(1) | NULL ] number rows columns printed, greater equal 2. Printing abbreviated middle. Can NULL print everything. digits [integer(1) | NULL ] number decimal places used. Negative values allowed, resulting rounding power ten. Can NULL round. row.names, col.names [logical(1)] Print row names column names?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/print_data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print (abbreviated) data.frame — print_data.frame","text":"Invisibly returns x.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/print_data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print (abbreviated) data.frame — print_data.frame","text":"","code":"x <- data.frame(1:10, LETTERS[1:10], stats::rnorm(10)) print_data.frame(x, rows = 7) #>    X1.10 LETTERS.1.10. stats..rnorm.10. #> 1   1    A              0.8705769       #> 2   2    B             -1.7013244       #> 3   3    C             -0.5632261       #> 4   4    D              0.4160822       #>  #> <3 rows hidden> #>                                         #> 8   8    H              0.5539514       #> 9   9    I             -1.5040093       #> 10 10    J             -0.6936198       print_data.frame(x, rows = 7, cols = 2) #>    X1.10 <1 col hidden> stats..rnorm.10. #> 1   1          -         0.8705769       #> 2   2          -        -1.7013244       #> 3   3          -        -0.5632261       #> 4   4          -         0.4160822       #>  #> <3 rows hidden> #>                                          #> 8   8          -         0.5539514       #> 9   9          -        -1.5040093       #> 10 10          -        -0.6936198       print_data.frame(x, rows = 7, cols = 2, digits = 1) #>    X1.10 <1 col hidden> stats..rnorm.10. #> 1   1          -         0.9             #> 2   2          -        -1.7             #> 3   3          -        -0.6             #> 4   4          -         0.4             #>  #> <3 rows hidden> #>                                          #> 8   8          -         0.6             #> 9   9          -        -1.5             #> 10 10          -        -0.7             print_data.frame(x, rows = 7, cols = 2, digits = 1, row.names = FALSE) #>  X1.10 <1 col hidden> stats..rnorm.10. #>   1          -         0.9             #>   2          -        -1.7             #>   3          -        -0.6             #>   4          -         0.4             #>  #> <3 rows hidden> #>                                        #>   8          -         0.6             #>   9          -        -1.5             #>  10          -        -0.7             print_data.frame(x, rows = 7, cols = 2, digits = 1, col.names = FALSE) #>       <1 col hidden>      #> 1   1       -         0.9 #> 2   2       -        -1.7 #> 3   3       -        -0.6 #> 4   4       -         0.4 #>  #> <3 rows hidden> #>                           #> 8   8       -         0.6 #> 9   9       -        -1.5 #> 10 10       -        -0.7"},{"path":"http://loelschlaeger.de/oeli/reference/print_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Print (abbreviated) matrix — print_matrix","title":"Print (abbreviated) matrix — print_matrix","text":"function prints (possibly abbreviated) matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/print_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print (abbreviated) matrix — print_matrix","text":"","code":"print_matrix(   x,   rowdots = 4,   coldots = 4,   digits = 2,   label = NULL,   simplify = FALSE,   details = !simplify )"},{"path":"http://loelschlaeger.de/oeli/reference/print_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print (abbreviated) matrix — print_matrix","text":"x [atomic() | matrix] object printed. rowdots [integer(1)] row number replaced .... coldots [integer(1)] column number replaced .... digits [integer(1)] number printed decimal places input x numeric. label [character(1)] label x. printed simplify = FALSE. simplify [logical(1)] Simplify output? details [logical(1)] Print type dimension x?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/print_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print (abbreviated) matrix — print_matrix","text":"Invisibly returns x.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/print_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print (abbreviated) matrix — print_matrix","text":"function modified version pprint() {ramify} package.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/print_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print (abbreviated) matrix — print_matrix","text":"","code":"print_matrix(x = 1, label = \"single numeric\") #> single numeric : 1 print_matrix(x = LETTERS[1:26], label = \"letters\") #> letters : character vector of length 26  #> A B C ... Z print_matrix(x = 1:3, coldots = 2) #> double vector of length 3  #> 1 ... 3 print_matrix(x = matrix(rnorm(99), ncol = 1), label = \"single column matrix\") #> single column matrix : 99 x 1 matrix of doubles  #>        [,1] #> [1,]   1.92 #> [2,]    0.3 #> [3,]   -1.6 #> ...     ... #> [99,] -1.85 print_matrix(x = matrix(1:100, nrow = 1), label = \"single row matrix\") #> single row matrix : 1 x 100 matrix of doubles  #>      [,1] [,2] [,3] ... [,100] #> [1,]    1    2    3 ...    100 print_matrix(x = matrix(LETTERS[1:24], ncol = 6), label = \"big matrix\") #> big matrix : 4 x 6 matrix of characters  #>      [,1] [,2] [,3] ... [,6] #> [1,]    A    E    I ...    U #> [2,]    B    F    J ...    V #> [3,]    C    G    K ...    W #> [4,]    D    H    L ...    X print_matrix(x = diag(5), coldots = 2, rowdots = 2, simplify = TRUE) #> [ 1 ... 0; ... ... ...; 0 ... 1 ]"},{"path":"http://loelschlaeger.de/oeli/reference/quiet.html","id":null,"dir":"Reference","previous_headings":"","what":"Silence R code — quiet","title":"Silence R code — quiet","text":"function silences warnings, messages cat() print() output R expressions functions.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/quiet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silence R code — quiet","text":"","code":"quiet(x, print_cat = TRUE, message = TRUE, warning = TRUE)"},{"path":"http://loelschlaeger.de/oeli/reference/quiet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silence R code — quiet","text":"x [expression] function expression value assignment expression. print_cat [logical(1)] Silence print() cat() outputs? message [logical(1)] Silence messages? warning [logical(1)] Silence warnings?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/quiet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silence R code — quiet","text":"Invisibly expression x.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/quiet.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Silence R code — quiet","text":"function modified version quiet.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/quiet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Silence R code — quiet","text":"","code":"f <- function() {   warning(\"warning\")   message(\"message\")   cat(\"cat\")   print(\"print\") } quiet(f())"},{"path":"http://loelschlaeger.de/oeli/reference/round_data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Round numeric columns of a data.frame — round_data.frame","title":"Round numeric columns of a data.frame — round_data.frame","text":"function rounds () numeric columns data.frame.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/round_data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Round numeric columns of a data.frame — round_data.frame","text":"","code":"round_data.frame(df, digits = 0)"},{"path":"http://loelschlaeger.de/oeli/reference/round_data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Round numeric columns of a data.frame — round_data.frame","text":"df [data.frame] data.frame. digits [integer(1) | NULL ] number decimal places used. Negative values allowed, resulting rounding power ten. Can NULL round.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/round_data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Round numeric columns of a data.frame — round_data.frame","text":"data.frame.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/round_data.frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Round numeric columns of a data.frame — round_data.frame","text":"","code":"df <- data.frame(\"label\" = c(\"A\", \"B\"), \"number\" = rnorm(10)) round_data.frame(df, digits = 1) #>    label number #> 1      A   -1.3 #> 2      B   -1.7 #> 3      A   -1.2 #> 4      B    1.1 #> 5      A    0.8 #> 6      B    1.8 #> 7      A    0.5 #> 8      B    1.2 #> 9      A    0.8 #> 10     B   -0.5"},{"path":"http://loelschlaeger.de/oeli/reference/sample_correlation_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample correlation matrix — sample_correlation_matrix","title":"Sample correlation matrix — sample_correlation_matrix","text":"function samples correlation matrix sampling covariance matrix inverse Wishart distribution transforming correlation matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/sample_correlation_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample correlation matrix — sample_correlation_matrix","text":"","code":"sample_correlation_matrix(dim, df = dim, scale = diag(dim))"},{"path":"http://loelschlaeger.de/oeli/reference/sample_correlation_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample correlation matrix — sample_correlation_matrix","text":"dim [integer(1)] dimension. df [integer(1)] degrees freedom inverse Wishart distribution greater equal dim. scale [matrix()] scale covariance matrix inverse Wishart distribution dimension dim.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/sample_correlation_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample correlation matrix — sample_correlation_matrix","text":"correlation matrix.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/sample_correlation_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample correlation matrix — sample_correlation_matrix","text":"","code":"sample_correlation_matrix(dim = 3) #>            [,1]       [,2]       [,3] #> [1,]  1.0000000 -0.9986422  0.9997408 #> [2,] -0.9986422  1.0000000 -0.9983855 #> [3,]  0.9997408 -0.9983855  1.0000000"},{"path":"http://loelschlaeger.de/oeli/reference/sample_covariance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample covariance matrix — sample_covariance_matrix","title":"Sample covariance matrix — sample_covariance_matrix","text":"function samples covariance matrix inverse Wishart distribution.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/sample_covariance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample covariance matrix — sample_covariance_matrix","text":"","code":"sample_covariance_matrix(dim, df = dim, scale = diag(dim), diag = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/sample_covariance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample covariance matrix — sample_covariance_matrix","text":"dim [integer(1)] dimension. df [integer(1)] degrees freedom inverse Wishart distribution greater equal dim. scale [matrix()] scale covariance matrix inverse Wishart distribution dimension dim. diag [logical(1)] Diagonal matrix?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/sample_covariance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample covariance matrix — sample_covariance_matrix","text":"covariance matrix.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/sample_covariance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample covariance matrix — sample_covariance_matrix","text":"","code":"sample_covariance_matrix(dim = 3) #>            [,1]      [,2]       [,3] #> [1,]  1.7307190 -2.402546  0.2237953 #> [2,] -2.4025463  4.629747 -1.1166574 #> [3,]  0.2237953 -1.116657  0.8916473"},{"path":"http://loelschlaeger.de/oeli/reference/sample_transition_probability_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample transition probability matrices — sample_transition_probability_matrix","title":"Sample transition probability matrices — sample_transition_probability_matrix","text":"function returns random, squared matrix dimension dim fulfills properties transition probability matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/sample_transition_probability_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample transition probability matrices — sample_transition_probability_matrix","text":"","code":"sample_transition_probability_matrix(dim, state_persistent = TRUE)"},{"path":"http://loelschlaeger.de/oeli/reference/sample_transition_probability_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample transition probability matrices — sample_transition_probability_matrix","text":"dim [integer(1)] dimension. state_persistent [logical(1)] Put probability diagonal?","code":""},{"path":"http://loelschlaeger.de/oeli/reference/sample_transition_probability_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample transition probability matrices — sample_transition_probability_matrix","text":"transition probability matrix.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/sample_transition_probability_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample transition probability matrices — sample_transition_probability_matrix","text":"","code":"sample_transition_probability_matrix(dim = 3) #>           [,1]       [,2]      [,3] #> [1,] 0.5554911 0.12845501 0.3160539 #> [2,] 0.2474678 0.48087802 0.2716542 #> [3,] 0.2920644 0.05801917 0.6499165"},{"path":"http://loelschlaeger.de/oeli/reference/simulate_markov_chain.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Markov chain — simulate_markov_chain","title":"Simulate Markov chain — simulate_markov_chain","text":"function simulates Markov chain.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/simulate_markov_chain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Markov chain — simulate_markov_chain","text":"","code":"simulate_markov_chain(Gamma, T, delta = oeli::stationary_distribution(Gamma))"},{"path":"http://loelschlaeger.de/oeli/reference/simulate_markov_chain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Markov chain — simulate_markov_chain","text":"Gamma [matrix()] transition probability matrix. T [integer(1)] length Markov chain. delta [numeric()] probability vector, initial distribution. stationary distribution used default.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/simulate_markov_chain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Markov chain — simulate_markov_chain","text":"numeric vector length T states.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/simulate_markov_chain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Markov chain — simulate_markov_chain","text":"","code":"Gamma <- matrix(c(0.8, 0.2, 0.3, 0.7), byrow = TRUE, nrow = 2) delta <- c(0.6, 0.4) simulate_markov_chain(Gamma = Gamma, T = 20, delta = delta) #>  [1] 2 2 2 2 2 1 1 1 1 1 1 2 1 2 2 2 1 1 1 1"},{"path":"http://loelschlaeger.de/oeli/reference/split_vector_at.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a vector at positions — split_vector_at","title":"Split a vector at positions — split_vector_at","text":"function splits vector specific positions.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/split_vector_at.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a vector at positions — split_vector_at","text":"","code":"split_vector_at(x, at)"},{"path":"http://loelschlaeger.de/oeli/reference/split_vector_at.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a vector at positions — split_vector_at","text":"x [atomic()`] vector elements. [integer()] Index position(s) just split. example, = n splits nth element x.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/split_vector_at.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a vector at positions — split_vector_at","text":"list.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/split_vector_at.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Split a vector at positions — split_vector_at","text":"Based https://stackoverflow.com//19274414.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/split_vector_at.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a vector at positions — split_vector_at","text":"","code":"x <- 1:10 split_vector_at(x, c(2, 3, 5, 7)) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 4 #>  #> [[4]] #> [1] 5 6 #>  #> [[5]] #> [1]  7  8  9 10 #>"},{"path":"http://loelschlaeger.de/oeli/reference/stationary_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Stationary distribution — stationary_distribution","title":"Stationary distribution — stationary_distribution","text":"function computes stationary distribution corresponding transition probability matrix.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/stationary_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stationary distribution — stationary_distribution","text":"","code":"stationary_distribution(tpm, soft_fail = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/stationary_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stationary distribution — stationary_distribution","text":"tpm [matrix()] transition probability matrix. soft_fail [logical(1)] Return discrete uniform distribution computation stationary distribution fails reason? Else, throw error.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/stationary_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stationary distribution — stationary_distribution","text":"numeric vector.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/stationary_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stationary distribution — stationary_distribution","text":"","code":"tpm <- matrix(0.05, nrow = 3, ncol = 3) diag(tpm) <- 0.9 stationary_distribution(tpm) #> [1] 0.3333333 0.3333333 0.3333333"},{"path":"http://loelschlaeger.de/oeli/reference/subsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate vector subsets — subsets","title":"Generate vector subsets — subsets","text":"function generates subsets vector.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/subsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate vector subsets — subsets","text":"","code":"subsets(v, n = seq_along(v))"},{"path":"http://loelschlaeger.de/oeli/reference/subsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate vector subsets — subsets","text":"v [atomic()`] vector elements. n [integer(1)`] requested subset sizes.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/subsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate vector subsets — subsets","text":"list, element subset v.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/subsets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate vector subsets — subsets","text":"","code":"v <- 1:3 subsets(v) #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 1 2 #>  #> [[5]] #> [1] 1 3 #>  #> [[6]] #> [1] 2 3 #>  #> [[7]] #> [1] 1 2 3 #>  subsets(v, c(1, 3)) # only subsets of length 1 or 3 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> [[3]] #> [1] 3 #>  #> [[4]] #> [1] 1 2 3 #>  subsets(integer())  # trivial case works #> list()"},{"path":"http://loelschlaeger.de/oeli/reference/system_information.html","id":null,"dir":"Reference","previous_headings":"","what":"General system level information — system_information","title":"General system level information — system_information","text":"function returns list general system level information.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/system_information.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General system level information — system_information","text":"","code":"system_information()"},{"path":"http://loelschlaeger.de/oeli/reference/system_information.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General system level information — system_information","text":"list elements: maschine, model name device cores, number cores ram, size RAM os, operating system rversion, R version used","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/system_information.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General system level information — system_information","text":"","code":"system_information() #> $machine #> [1] \"AMD EPYC 7763 64-Core Processor\" #>  #> $cores #> [1] 4 #>  #> $ram #> 16.8 GB #>  #> $os #> [1] \"unix\" #>  #> $rversion #> [1] ‘4.5.1’ #>"},{"path":"http://loelschlaeger.de/oeli/reference/timed.html","id":null,"dir":"Reference","previous_headings":"","what":"Interrupt long evaluations — timed","title":"Interrupt long evaluations — timed","text":"function interrupts evaluation certain number seconds. Note limitations documented setTimeLimit.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/timed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interrupt long evaluations — timed","text":"","code":"timed(expression, seconds = Inf, on_time_out = \"silent\")"},{"path":"http://loelschlaeger.de/oeli/reference/timed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interrupt long evaluations — timed","text":"expression [expression] R expression evaluated. seconds [numeric(1)] number seconds. on_time_out [character(1)] Defines action take evaluation time exceeded, either: \"error\" throw error exception \"warning\" return NULL along warning \"silent\" (default) just return NULL","code":""},{"path":"http://loelschlaeger.de/oeli/reference/timed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interrupt long evaluations — timed","text":"value expression , evaluation time exceeded, whatever specified on_time_out.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/timed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interrupt long evaluations — timed","text":"","code":"foo <- function(x) {   for (i in 1:10) Sys.sleep(x / 10)   return(x) } timed(foo(0.5), 1) #> [1] 0.5 timed(foo(1.5), 1) #> NULL"},{"path":"http://loelschlaeger.de/oeli/reference/try_silent.html","id":null,"dir":"Reference","previous_headings":"","what":"Try an expression silently — try_silent","title":"Try an expression silently — try_silent","text":"function tries execute expr returns string error message execution failed.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/try_silent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try an expression silently — try_silent","text":"","code":"try_silent(expr)"},{"path":"http://loelschlaeger.de/oeli/reference/try_silent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try an expression silently — try_silent","text":"expr [expression] R expression evaluated.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/try_silent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try an expression silently — try_silent","text":"Either value expr case failure object class fail, contains error message.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/try_silent.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Try an expression silently — try_silent","text":"function wrapper try.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/try_silent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Try an expression silently — try_silent","text":"","code":"if (FALSE) { # \\dontrun{ try_silent(1 + 1) try_silent(1 + \"1\") } # }"},{"path":"http://loelschlaeger.de/oeli/reference/unexpected_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Handling of an unexpected error — unexpected_error","title":"Handling of an unexpected error — unexpected_error","text":"function reacts unexpected error throwing error linking issue site request submit issue.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/unexpected_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handling of an unexpected error — unexpected_error","text":"","code":"unexpected_error(   msg = \"Ups, an unexpected error occured.\",   issue_link = \"https://github.com/loelschlaeger/oeli/issues\" )"},{"path":"http://loelschlaeger.de/oeli/reference/unexpected_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handling of an unexpected error — unexpected_error","text":"msg [character(1)] error message. issue_link [character(1)] URL issues site.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/unexpected_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handling of an unexpected error — unexpected_error","text":"return value, throws error.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/user_confirm.html","id":null,"dir":"Reference","previous_headings":"","what":"User confirmation — user_confirm","title":"User confirmation — user_confirm","text":"function asks interactive question binary question.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/user_confirm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User confirmation — user_confirm","text":"","code":"user_confirm(question = \"Question?\", default = FALSE)"},{"path":"http://loelschlaeger.de/oeli/reference/user_confirm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User confirmation — user_confirm","text":"question [character(1)] binary question ask. end question mark. default [logical(1)] default decision.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/user_confirm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User confirmation — user_confirm","text":"Either TRUE FALSE.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/variable_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine variable name — variable_name","title":"Determine variable name — variable_name","text":"function tries determine name variable passed function.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/variable_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine variable name — variable_name","text":"","code":"variable_name(variable, fallback = \"unnamed\")"},{"path":"http://loelschlaeger.de/oeli/reference/variable_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine variable name — variable_name","text":"variable [] object. fallback [character(1)] fallback name reason actual variable name (must single character) determined.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/variable_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine variable name — variable_name","text":"character, variable name.","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/variable_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine variable name — variable_name","text":"","code":"variable_name(a) #> [1] \"a\" f <- function(x) variable_name(x) f(x = a) #> [1] \"a\""},{"path":"http://loelschlaeger.de/oeli/reference/vector_occurrence.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the positions of first or last occurrence of unique vector elements — vector_occurrence","title":"Find the positions of first or last occurrence of unique vector elements — vector_occurrence","text":"function finds positions first last occurrence unique vector elements.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/vector_occurrence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the positions of first or last occurrence of unique vector elements — vector_occurrence","text":"","code":"vector_occurrence(x, type = \"first\")"},{"path":"http://loelschlaeger.de/oeli/reference/vector_occurrence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the positions of first or last occurrence of unique vector elements — vector_occurrence","text":"x [atomic()] vector. type [character(1)] Either \"first\" first \"last\" last occurrence.","code":""},{"path":"http://loelschlaeger.de/oeli/reference/vector_occurrence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the positions of first or last occurrence of unique vector elements — vector_occurrence","text":"integer vector, positions unique vector elements. ordering corresponds unique(x), .e., \\(\\)-th element output (first last) occurrence \\(\\)-th element unique(x).","code":""},{"path":[]},{"path":"http://loelschlaeger.de/oeli/reference/vector_occurrence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the positions of first or last occurrence of unique vector elements — vector_occurrence","text":"","code":"x <- c(1, 1, 1, 2, 2, 2, 3, 3, 3) unique(x) #> [1] 1 2 3 vector_occurrence(x, \"first\") #> [1] 1 4 7 vector_occurrence(x, \"last\") #> [1] 3 6 9"},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-075","dir":"Changelog","previous_headings":"","what":"oeli 0.7.5","title":"oeli 0.7.5","text":"Moved header files ../src/ ../inst/include/ make available externally. Removed degenerate case dmvnorm(). Fixed bug sampling inverse Wishart distribution. Added function pmvnorm() calculates (multivariate) Gaussian CDF. Added function gaussian_tv() calculates Gaussian total variation. Added function equidistant_vectors() generates equidistant vectors Euclidean space. Added functions dmixnorm(), pmixnorm(), rmixnorm() compute density, cumulative distribution function, samples mixture multivariate normal distribution.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-074","dir":"Changelog","previous_headings":"","what":"oeli 0.7.4","title":"oeli 0.7.4","text":"CRAN release: 2025-06-27 Added R6 object Simulator provides convenience running simulations. Added function occurrence_info() provides verbose information absolute relative occurrences.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-073","dir":"Changelog","previous_headings":"","what":"oeli 0.7.3","title":"oeli 0.7.3","text":"CRAN release: 2025-05-19 Added function find_namespace_calls() searches namespace calls .R files. Cleaned package dependencies. Added option custom background package_logo().","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-072","dir":"Changelog","previous_headings":"","what":"oeli 0.7.2","title":"oeli 0.7.2","text":"CRAN release: 2025-04-18 Added function check_missing() checks missing formal arguments.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-071","dir":"Changelog","previous_headings":"","what":"oeli 0.7.1","title":"oeli 0.7.1","text":"CRAN release: 2024-11-27 Allowed zero-dimension edge cases cov_to_chol() chol_to_cov(). Added function map_indices() maps indices input vector corresponding sequences grouped indices. Added function M() taking differences resulting vector negative. Removed function renv_development_packages() argument use_logo package_logo() get rid dependency usethis package. Extended input_check_response() allow multiple alternative checking criteria.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-070","dir":"Changelog","previous_headings":"","what":"oeli 0.7.0","title":"oeli 0.7.0","text":"CRAN release: 2024-10-16 Improved documentation diff_cov(), undiff_cov(), delta(). Improved documentation dmvnorm() rmvnorm(). mean vector can now length 1 convenience. degenerate case (covariance zero) now supported. Also separate dimensions Sigma can degenerate rmvnorm(). Added function split_vector_at() split vector specific positions. Allow zero matrix cov_to_chol(). Added function round_data.frame() rounds numeric columns data.frame. Added function print_data.frame() prints (possibly abbreviated) data.frame. Renamed function group_data_frame() -> group_data.frame(). Renamed function delete_data_frame_columns() -> delete_columns_data.frame().","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-060","dir":"Changelog","previous_headings":"","what":"oeli 0.6.0","title":"oeli 0.6.0","text":"CRAN release: 2024-09-17 Added function quiet() silence expressions. Added functions dtnorm() dttnorm() calculate density (two-sided) truncated normal distribution. Added function correlated_regressors() simulate correlated regressor values. Improved documentation. Removed functions check_date() find_closest_year() (special, needed fHMM package).","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-052","dir":"Changelog","previous_headings":"","what":"oeli 0.5.2","title":"oeli 0.5.2","text":"CRAN release: 2024-06-19 Added function identical_structure() check two objects identical structure. Fixed bug matrix_diagonal_indices(): always return integer.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-051","dir":"Changelog","previous_headings":"","what":"oeli 0.5.1","title":"oeli 0.5.1","text":"Added function vector_occurrence() find positions first last occurrence unique vector elements.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-050","dir":"Changelog","previous_headings":"","what":"oeli 0.5.0","title":"oeli 0.5.0","text":"CRAN release: 2024-05-22 Added function chunk_vector() split vector chunks. Added function insert_matrix_column() add column matrix. Added function insert_vector_entry() add entry vector. Renamed basic_package_sticker() -> package_logo() added demo. Added function matrix_diagonal_indices() returns indices diagonal elements quadratic matrix. Fixed bug check_numeric_vector(): null.ok work. Added function subsets() generates subsets vector. Fixed bug system_information(): fail information retrieved.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-041","dir":"Changelog","previous_headings":"","what":"oeli 0.4.1","title":"oeli 0.4.1","text":"CRAN release: 2024-02-24 Removed HMM code plot_sequence() function (really fit package). Added vignettes illustrate use cases.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-040","dir":"Changelog","previous_headings":"","what":"oeli 0.4.0","title":"oeli 0.4.0","text":"CRAN release: 2024-02-04 Fixed bug checks matrices checking NA, NaN infinite values. Increment RoxygenNote 7.3.0. Added function system_information() returns general system level information. Added functions check_list_of_lists(), test_list_of_lists(), assert_list_of_lists(). Added functions check_numeric_vector(), test_numeric_vector(), assert_numeric_vector(). Fixed bug merge_lists(), NULL elements got erroneously ignored.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-032","dir":"Changelog","previous_headings":"","what":"oeli 0.3.2","title":"oeli 0.3.2","text":"CRAN release: 2024-01-14 Fixed bug function_arguments().","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-031","dir":"Changelog","previous_headings":"","what":"oeli 0.3.1","title":"oeli 0.3.1","text":"CRAN release: 2023-12-08 Fixed https://github.com/RcppCore/Rcpp/issues/1287.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-030","dir":"Changelog","previous_headings":"","what":"oeli 0.3.0","title":"oeli 0.3.0","text":"CRAN release: 2023-12-02 Added function check_date() checks input correct date format. Added function find_closest_year() finds closest year given date. Added function match_numerics() matches indices two numeric vectors good possible (means smallest possible sum deviations). Added function simulate_markov_chain() simulates Markov chain. Added function sample_transition_probability_matrix() samples transition probability matrix. Added functions test_covariance_matrix(), test_correlation_matrix(), test_transition_probability_matrix(), test_probability_vector() (“test” version corresponding “assert” functions). Added argument tolerance covariance matrix, correlation matrix, transition probability matrix, probability vector check functions account machine epsilon avoid false positives. Added functions ll_hmm() simulate_hmm() compute log-likelihood simulate data hidden Markov model. Added argument on_time_out function timed() defines action take evaluation time exceeded (error, warning, silent). Added support select identifier = \"\" Index object suppress warnings (unknown identifiers selected) (globally) via $hide_warnings field. Added argument logical Index object combine multiple identifiers either logical logical . Added function unexpected_error() handles unknown error. Added function group_data_frame() groups data.frame according values column. Added function delete_data_frame_columns() deletes columns data.frame. Added function renv_development_packages() creates file loads development packages renv can detect write lockfile. Added function plot_sequence() plots sequence numbers. Renamed Index -> Storage. Initialized package website pkgdown started add vignettes.","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-020","dir":"Changelog","previous_headings":"","what":"oeli 0.2.0","title":"oeli 0.2.0","text":"CRAN release: 2023-11-03 Added function timed() evaluates expression interrupts evaluation defined amount seconds. Added function .call_timed() measures computation time .call() call. Added function try_silent() tries execute expression returns string error message execution failed. Added R6 object Index provides simple indexing interface list elements. Modified basic_package_sticker(): Option add brackets package name, now scales font, function longer exported. Added function function_body() extracts body function. Added function permutation() creates permutations given vector. Added function variable_name() tries determine name variable passed function. Added function function_defaults() returns default function arguments. Added R6 object Dictionary provides simple simple key-value interface. Added function merge_lists() merges lists based element names. Renamed arguments function timed(): expr -> expression, secs -> seconds. Added argument units function .call_timed().","code":""},{"path":"http://loelschlaeger.de/oeli/news/index.html","id":"oeli-010","dir":"Changelog","previous_headings":"","what":"oeli 0.1.0","title":"oeli 0.1.0","text":"CRAN release: 2023-10-23 Initial CRAN submission.","code":""}]
