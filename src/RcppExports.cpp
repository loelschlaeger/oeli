// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/oeli.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dmvnorm_cpp
double dmvnorm_cpp(arma::vec const& x, arma::vec const& mean, arma::mat const& Sigma, bool log);
RcppExport SEXP _oeli_dmvnorm_cpp(SEXP xSEXP, SEXP meanSEXP, SEXP SigmaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec const& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnorm_cpp(x, mean, Sigma, log));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm_cpp
arma::vec rmvnorm_cpp(arma::vec mean, arma::mat const& Sigma, bool log);
RcppExport SEXP _oeli_rmvnorm_cpp(SEXP meanSEXP, SEXP SigmaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm_cpp(mean, Sigma, log));
    return rcpp_result_gen;
END_RCPP
}
// dtnorm_cpp
double dtnorm_cpp(double x, double mean, double sd, double point, bool above, bool log);
RcppExport SEXP _oeli_dtnorm_cpp(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP pointSEXP, SEXP aboveSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type point(pointSEXP);
    Rcpp::traits::input_parameter< bool >::type above(aboveSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dtnorm_cpp(x, mean, sd, point, above, log));
    return rcpp_result_gen;
END_RCPP
}
// dttnorm_cpp
double dttnorm_cpp(double x, double mean, double sd, double lower, double upper, bool log);
RcppExport SEXP _oeli_dttnorm_cpp(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dttnorm_cpp(x, mean, sd, lower, upper, log));
    return rcpp_result_gen;
END_RCPP
}
// rtnorm_cpp
double rtnorm_cpp(double mean, double sd, double point, bool above, bool log);
RcppExport SEXP _oeli_rtnorm_cpp(SEXP meanSEXP, SEXP sdSEXP, SEXP pointSEXP, SEXP aboveSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type point(pointSEXP);
    Rcpp::traits::input_parameter< bool >::type above(aboveSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(rtnorm_cpp(mean, sd, point, above, log));
    return rcpp_result_gen;
END_RCPP
}
// rttnorm_cpp
double rttnorm_cpp(double mean, double sd, double lower, double upper, bool log);
RcppExport SEXP _oeli_rttnorm_cpp(SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(rttnorm_cpp(mean, sd, lower, upper, log));
    return rcpp_result_gen;
END_RCPP
}
// dwishart_cpp
double dwishart_cpp(arma::mat const& x, int const& df, arma::mat const& scale, bool log, bool inv);
RcppExport SEXP _oeli_dwishart_cpp(SEXP xSEXP, SEXP dfSEXP, SEXP scaleSEXP, SEXP logSEXP, SEXP invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat const& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int const& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< bool >::type inv(invSEXP);
    rcpp_result_gen = Rcpp::wrap(dwishart_cpp(x, df, scale, log, inv));
    return rcpp_result_gen;
END_RCPP
}
// rwishart_cpp
arma::mat rwishart_cpp(double df, arma::mat const& scale, bool inv);
RcppExport SEXP _oeli_rwishart_cpp(SEXP dfSEXP, SEXP scaleSEXP, SEXP invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< arma::mat const& >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type inv(invSEXP);
    rcpp_result_gen = Rcpp::wrap(rwishart_cpp(df, scale, inv));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _oeli_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _oeli_RcppExport_registerCCallable() { 
    R_RegisterCCallable("oeli", "_oeli_RcppExport_validate", (DL_FUNC)_oeli_RcppExport_validate);
    return R_NilValue;
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_oeli_dmvnorm_cpp", (DL_FUNC) &_oeli_dmvnorm_cpp, 4},
    {"_oeli_rmvnorm_cpp", (DL_FUNC) &_oeli_rmvnorm_cpp, 3},
    {"_oeli_dtnorm_cpp", (DL_FUNC) &_oeli_dtnorm_cpp, 6},
    {"_oeli_dttnorm_cpp", (DL_FUNC) &_oeli_dttnorm_cpp, 6},
    {"_oeli_rtnorm_cpp", (DL_FUNC) &_oeli_rtnorm_cpp, 5},
    {"_oeli_rttnorm_cpp", (DL_FUNC) &_oeli_rttnorm_cpp, 5},
    {"_oeli_dwishart_cpp", (DL_FUNC) &_oeli_dwishart_cpp, 5},
    {"_oeli_rwishart_cpp", (DL_FUNC) &_oeli_rwishart_cpp, 3},
    {"_oeli_RcppExport_registerCCallable", (DL_FUNC) &_oeli_RcppExport_registerCCallable, 0},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_oeli(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
